/*
Convection Texture Tools
Copyright (c) 2018-2019 Eric Lasota

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject
to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

-------------------------------------------------------------------------------------

Portions based on DirectX Texture Library (DirectXTex)

Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the MIT License.

http://go.microsoft.com/fwlink/?LinkId=248926
*/
#include "ConvectionKernels_Config.h"

#if !defined(CVTT_SINGLE_FILE) || defined(CVTT_SINGLE_FILE_IMPL)

#include "ConvectionKernels_S3TC.h"

#include "ConvectionKernels_AggregatedError.h"
#include "ConvectionKernels_BCCommon.h"
#include "ConvectionKernels_EndpointRefiner.h"
#include "ConvectionKernels_EndpointSelector.h"
#include "ConvectionKernels_IndexSelector.h"
#include "ConvectionKernels_UnfinishedEndpoints.h"

namespace cvtt
{
    namespace Internal
    {
        namespace S3TCSingleColorTables
        {
            struct SingleColorTableEntry
            {
                uint8_t m_min;
                uint8_t m_max;
                uint8_t m_actualColor;
                uint8_t m_span;
            };

            SingleColorTableEntry g_singleColor5_3[256] =
            {
                { 0, 0, 0, 0 },{ 0, 0, 0, 0 },{ 8, 0, 2, 8 },{ 8, 0, 2, 8 },{ 0, 8, 5, 8 },{ 0, 8, 5, 8 },{ 0, 8, 5, 8 },{ 8, 8, 8, 0 },
                { 8, 8, 8, 0 },{ 8, 8, 8, 0 },{ 16, 8, 10, 8 },{ 33, 0, 11, 33 },{ 8, 16, 13, 8 },{ 8, 16, 13, 8 },{ 8, 16, 13, 8 },{ 16, 16, 16, 0 },
                { 16, 16, 16, 0 },{ 16, 16, 16, 0 },{ 24, 16, 18, 8 },{ 41, 8, 19, 33 },{ 16, 24, 21, 8 },{ 16, 24, 21, 8 },{ 0, 33, 22, 33 },{ 24, 24, 24, 0 },
                { 24, 24, 24, 0 },{ 24, 24, 24, 0 },{ 33, 24, 27, 9 },{ 33, 24, 27, 9 },{ 33, 24, 27, 9 },{ 41, 24, 29, 17 },{ 24, 33, 30, 9 },{ 24, 33, 30, 9 },
                { 16, 41, 32, 25 },{ 33, 33, 33, 0 },{ 33, 33, 33, 0 },{ 41, 33, 35, 8 },{ 41, 33, 35, 8 },{ 33, 41, 38, 8 },{ 33, 41, 38, 8 },{ 33, 41, 38, 8 },
                { 24, 49, 40, 25 },{ 41, 41, 41, 0 },{ 41, 41, 41, 0 },{ 49, 41, 43, 8 },{ 66, 33, 44, 33 },{ 41, 49, 46, 8 },{ 41, 49, 46, 8 },{ 41, 49, 46, 8 },
                { 49, 49, 49, 0 },{ 49, 49, 49, 0 },{ 49, 49, 49, 0 },{ 57, 49, 51, 8 },{ 74, 41, 52, 33 },{ 49, 57, 54, 8 },{ 49, 57, 54, 8 },{ 33, 66, 55, 33 },
                { 57, 57, 57, 0 },{ 57, 57, 57, 0 },{ 57, 57, 57, 0 },{ 66, 57, 60, 9 },{ 66, 57, 60, 9 },{ 66, 57, 60, 9 },{ 74, 57, 62, 17 },{ 57, 66, 63, 9 },
                { 57, 66, 63, 9 },{ 49, 74, 65, 25 },{ 66, 66, 66, 0 },{ 66, 66, 66, 0 },{ 74, 66, 68, 8 },{ 74, 66, 68, 8 },{ 66, 74, 71, 8 },{ 66, 74, 71, 8 },
                { 66, 74, 71, 8 },{ 57, 82, 73, 25 },{ 74, 74, 74, 0 },{ 74, 74, 74, 0 },{ 82, 74, 76, 8 },{ 99, 66, 77, 33 },{ 74, 82, 79, 8 },{ 74, 82, 79, 8 },
                { 74, 82, 79, 8 },{ 82, 82, 82, 0 },{ 82, 82, 82, 0 },{ 82, 82, 82, 0 },{ 90, 82, 84, 8 },{ 107, 74, 85, 33 },{ 82, 90, 87, 8 },{ 82, 90, 87, 8 },
                { 66, 99, 88, 33 },{ 90, 90, 90, 0 },{ 90, 90, 90, 0 },{ 90, 90, 90, 0 },{ 99, 90, 93, 9 },{ 99, 90, 93, 9 },{ 99, 90, 93, 9 },{ 107, 90, 95, 17 },
                { 90, 99, 96, 9 },{ 90, 99, 96, 9 },{ 82, 107, 98, 25 },{ 99, 99, 99, 0 },{ 99, 99, 99, 0 },{ 107, 99, 101, 8 },{ 107, 99, 101, 8 },{ 99, 107, 104, 8 },
                { 99, 107, 104, 8 },{ 99, 107, 104, 8 },{ 90, 115, 106, 25 },{ 107, 107, 107, 0 },{ 107, 107, 107, 0 },{ 115, 107, 109, 8 },{ 132, 99, 110, 33 },{ 107, 115, 112, 8 },
                { 107, 115, 112, 8 },{ 107, 115, 112, 8 },{ 115, 115, 115, 0 },{ 115, 115, 115, 0 },{ 115, 115, 115, 0 },{ 123, 115, 117, 8 },{ 140, 107, 118, 33 },{ 115, 123, 120, 8 },
                { 115, 123, 120, 8 },{ 99, 132, 121, 33 },{ 123, 123, 123, 0 },{ 123, 123, 123, 0 },{ 123, 123, 123, 0 },{ 132, 123, 126, 9 },{ 132, 123, 126, 9 },{ 132, 123, 126, 9 },
                { 140, 123, 128, 17 },{ 123, 132, 129, 9 },{ 123, 132, 129, 9 },{ 115, 140, 131, 25 },{ 132, 132, 132, 0 },{ 132, 132, 132, 0 },{ 140, 132, 134, 8 },{ 140, 132, 134, 8 },
                { 132, 140, 137, 8 },{ 132, 140, 137, 8 },{ 132, 140, 137, 8 },{ 123, 148, 139, 25 },{ 140, 140, 140, 0 },{ 140, 140, 140, 0 },{ 148, 140, 142, 8 },{ 165, 132, 143, 33 },
                { 140, 148, 145, 8 },{ 140, 148, 145, 8 },{ 140, 148, 145, 8 },{ 148, 148, 148, 0 },{ 148, 148, 148, 0 },{ 148, 148, 148, 0 },{ 156, 148, 150, 8 },{ 173, 140, 151, 33 },
                { 148, 156, 153, 8 },{ 148, 156, 153, 8 },{ 132, 165, 154, 33 },{ 156, 156, 156, 0 },{ 156, 156, 156, 0 },{ 156, 156, 156, 0 },{ 165, 156, 159, 9 },{ 165, 156, 159, 9 },
                { 165, 156, 159, 9 },{ 173, 156, 161, 17 },{ 156, 165, 162, 9 },{ 156, 165, 162, 9 },{ 148, 173, 164, 25 },{ 165, 165, 165, 0 },{ 165, 165, 165, 0 },{ 173, 165, 167, 8 },
                { 173, 165, 167, 8 },{ 165, 173, 170, 8 },{ 165, 173, 170, 8 },{ 165, 173, 170, 8 },{ 156, 181, 172, 25 },{ 173, 173, 173, 0 },{ 173, 173, 173, 0 },{ 181, 173, 175, 8 },
                { 198, 165, 176, 33 },{ 173, 181, 178, 8 },{ 173, 181, 178, 8 },{ 173, 181, 178, 8 },{ 181, 181, 181, 0 },{ 181, 181, 181, 0 },{ 181, 181, 181, 0 },{ 189, 181, 183, 8 },
                { 206, 173, 184, 33 },{ 181, 189, 186, 8 },{ 181, 189, 186, 8 },{ 165, 198, 187, 33 },{ 189, 189, 189, 0 },{ 189, 189, 189, 0 },{ 189, 189, 189, 0 },{ 198, 189, 192, 9 },
                { 198, 189, 192, 9 },{ 198, 189, 192, 9 },{ 206, 189, 194, 17 },{ 189, 198, 195, 9 },{ 189, 198, 195, 9 },{ 181, 206, 197, 25 },{ 198, 198, 198, 0 },{ 198, 198, 198, 0 },
                { 206, 198, 200, 8 },{ 206, 198, 200, 8 },{ 198, 206, 203, 8 },{ 198, 206, 203, 8 },{ 198, 206, 203, 8 },{ 189, 214, 205, 25 },{ 206, 206, 206, 0 },{ 206, 206, 206, 0 },
                { 214, 206, 208, 8 },{ 231, 198, 209, 33 },{ 206, 214, 211, 8 },{ 206, 214, 211, 8 },{ 206, 214, 211, 8 },{ 214, 214, 214, 0 },{ 214, 214, 214, 0 },{ 214, 214, 214, 0 },
                { 222, 214, 216, 8 },{ 239, 206, 217, 33 },{ 214, 222, 219, 8 },{ 214, 222, 219, 8 },{ 198, 231, 220, 33 },{ 222, 222, 222, 0 },{ 222, 222, 222, 0 },{ 222, 222, 222, 0 },
                { 231, 222, 225, 9 },{ 231, 222, 225, 9 },{ 231, 222, 225, 9 },{ 239, 222, 227, 17 },{ 222, 231, 228, 9 },{ 222, 231, 228, 9 },{ 214, 239, 230, 25 },{ 231, 231, 231, 0 },
                { 231, 231, 231, 0 },{ 239, 231, 233, 8 },{ 239, 231, 233, 8 },{ 231, 239, 236, 8 },{ 231, 239, 236, 8 },{ 231, 239, 236, 8 },{ 222, 247, 238, 25 },{ 239, 239, 239, 0 },
                { 239, 239, 239, 0 },{ 247, 239, 241, 8 },{ 247, 239, 241, 8 },{ 239, 247, 244, 8 },{ 239, 247, 244, 8 },{ 239, 247, 244, 8 },{ 247, 247, 247, 0 },{ 247, 247, 247, 0 },
                { 247, 247, 247, 0 },{ 255, 247, 249, 8 },{ 255, 247, 249, 8 },{ 247, 255, 252, 8 },{ 247, 255, 252, 8 },{ 247, 255, 252, 8 },{ 255, 255, 255, 0 },{ 255, 255, 255, 0 },
            };

            SingleColorTableEntry g_singleColor6_3[256] =
            {
                { 0, 0, 0, 0 },{ 4, 0, 1, 4 },{ 0, 4, 2, 4 },{ 4, 4, 4, 0 },{ 4, 4, 4, 0 },{ 8, 4, 5, 4 },{ 4, 8, 6, 4 },{ 8, 8, 8, 0 },
                { 8, 8, 8, 0 },{ 12, 8, 9, 4 },{ 8, 12, 10, 4 },{ 12, 12, 12, 0 },{ 12, 12, 12, 0 },{ 16, 12, 13, 4 },{ 12, 16, 14, 4 },{ 16, 16, 16, 0 },
                { 16, 16, 16, 0 },{ 20, 16, 17, 4 },{ 16, 20, 18, 4 },{ 20, 20, 20, 0 },{ 20, 20, 20, 0 },{ 24, 20, 21, 4 },{ 20, 24, 22, 4 },{ 69, 0, 23, 69 },
                { 24, 24, 24, 0 },{ 28, 24, 25, 4 },{ 24, 28, 26, 4 },{ 65, 8, 27, 57 },{ 28, 28, 28, 0 },{ 32, 28, 29, 4 },{ 28, 32, 30, 4 },{ 69, 12, 31, 57 },
                { 32, 32, 32, 0 },{ 36, 32, 33, 4 },{ 32, 36, 34, 4 },{ 65, 20, 35, 45 },{ 36, 36, 36, 0 },{ 40, 36, 37, 4 },{ 36, 40, 38, 4 },{ 69, 24, 39, 45 },
                { 40, 40, 40, 0 },{ 44, 40, 41, 4 },{ 40, 44, 42, 4 },{ 65, 32, 43, 33 },{ 44, 44, 44, 0 },{ 48, 44, 45, 4 },{ 44, 48, 46, 4 },{ 69, 36, 47, 33 },
                { 48, 48, 48, 0 },{ 52, 48, 49, 4 },{ 48, 52, 50, 4 },{ 65, 44, 51, 21 },{ 52, 52, 52, 0 },{ 56, 52, 53, 4 },{ 52, 56, 54, 4 },{ 69, 48, 55, 21 },
                { 56, 56, 56, 0 },{ 60, 56, 57, 4 },{ 56, 60, 58, 4 },{ 65, 56, 59, 9 },{ 60, 60, 60, 0 },{ 65, 60, 61, 5 },{ 56, 65, 62, 9 },{ 60, 65, 63, 5 },
                { 56, 69, 64, 13 },{ 65, 65, 65, 0 },{ 69, 65, 66, 4 },{ 65, 69, 67, 4 },{ 60, 73, 68, 13 },{ 69, 69, 69, 0 },{ 73, 69, 70, 4 },{ 69, 73, 71, 4 },
                { 56, 81, 72, 25 },{ 73, 73, 73, 0 },{ 77, 73, 74, 4 },{ 73, 77, 75, 4 },{ 60, 85, 76, 25 },{ 77, 77, 77, 0 },{ 81, 77, 78, 4 },{ 77, 81, 79, 4 },
                { 56, 93, 80, 37 },{ 81, 81, 81, 0 },{ 85, 81, 82, 4 },{ 81, 85, 83, 4 },{ 60, 97, 84, 37 },{ 85, 85, 85, 0 },{ 89, 85, 86, 4 },{ 85, 89, 87, 4 },
                { 56, 105, 88, 49 },{ 89, 89, 89, 0 },{ 93, 89, 90, 4 },{ 89, 93, 91, 4 },{ 60, 109, 92, 49 },{ 93, 93, 93, 0 },{ 97, 93, 94, 4 },{ 93, 97, 95, 4 },
                { 134, 77, 96, 57 },{ 97, 97, 97, 0 },{ 101, 97, 98, 4 },{ 97, 101, 99, 4 },{ 130, 85, 100, 45 },{ 101, 101, 101, 0 },{ 105, 101, 102, 4 },{ 101, 105, 103, 4 },
                { 134, 89, 104, 45 },{ 105, 105, 105, 0 },{ 109, 105, 106, 4 },{ 105, 109, 107, 4 },{ 130, 97, 108, 33 },{ 109, 109, 109, 0 },{ 113, 109, 110, 4 },{ 109, 113, 111, 4 },
                { 134, 101, 112, 33 },{ 113, 113, 113, 0 },{ 117, 113, 114, 4 },{ 113, 117, 115, 4 },{ 130, 109, 116, 21 },{ 117, 117, 117, 0 },{ 121, 117, 118, 4 },{ 117, 121, 119, 4 },
                { 134, 113, 120, 21 },{ 121, 121, 121, 0 },{ 125, 121, 122, 4 },{ 121, 125, 123, 4 },{ 130, 121, 124, 9 },{ 125, 125, 125, 0 },{ 130, 125, 126, 5 },{ 121, 130, 127, 9 },
                { 125, 130, 128, 5 },{ 121, 134, 129, 13 },{ 130, 130, 130, 0 },{ 134, 130, 131, 4 },{ 130, 134, 132, 4 },{ 125, 138, 133, 13 },{ 134, 134, 134, 0 },{ 138, 134, 135, 4 },
                { 134, 138, 136, 4 },{ 121, 146, 137, 25 },{ 138, 138, 138, 0 },{ 142, 138, 139, 4 },{ 138, 142, 140, 4 },{ 125, 150, 141, 25 },{ 142, 142, 142, 0 },{ 146, 142, 143, 4 },
                { 142, 146, 144, 4 },{ 121, 158, 145, 37 },{ 146, 146, 146, 0 },{ 150, 146, 147, 4 },{ 146, 150, 148, 4 },{ 125, 162, 149, 37 },{ 150, 150, 150, 0 },{ 154, 150, 151, 4 },
                { 150, 154, 152, 4 },{ 121, 170, 153, 49 },{ 154, 154, 154, 0 },{ 158, 154, 155, 4 },{ 154, 158, 156, 4 },{ 125, 174, 157, 49 },{ 158, 158, 158, 0 },{ 162, 158, 159, 4 },
                { 158, 162, 160, 4 },{ 199, 142, 161, 57 },{ 162, 162, 162, 0 },{ 166, 162, 163, 4 },{ 162, 166, 164, 4 },{ 195, 150, 165, 45 },{ 166, 166, 166, 0 },{ 170, 166, 167, 4 },
                { 166, 170, 168, 4 },{ 199, 154, 169, 45 },{ 170, 170, 170, 0 },{ 174, 170, 171, 4 },{ 170, 174, 172, 4 },{ 195, 162, 173, 33 },{ 174, 174, 174, 0 },{ 178, 174, 175, 4 },
                { 174, 178, 176, 4 },{ 199, 166, 177, 33 },{ 178, 178, 178, 0 },{ 182, 178, 179, 4 },{ 178, 182, 180, 4 },{ 195, 174, 181, 21 },{ 182, 182, 182, 0 },{ 186, 182, 183, 4 },
                { 182, 186, 184, 4 },{ 199, 178, 185, 21 },{ 186, 186, 186, 0 },{ 190, 186, 187, 4 },{ 186, 190, 188, 4 },{ 195, 186, 189, 9 },{ 190, 190, 190, 0 },{ 195, 190, 191, 5 },
                { 186, 195, 192, 9 },{ 190, 195, 193, 5 },{ 186, 199, 194, 13 },{ 195, 195, 195, 0 },{ 199, 195, 196, 4 },{ 195, 199, 197, 4 },{ 190, 203, 198, 13 },{ 199, 199, 199, 0 },
                { 203, 199, 200, 4 },{ 199, 203, 201, 4 },{ 186, 211, 202, 25 },{ 203, 203, 203, 0 },{ 207, 203, 204, 4 },{ 203, 207, 205, 4 },{ 190, 215, 206, 25 },{ 207, 207, 207, 0 },
                { 211, 207, 208, 4 },{ 207, 211, 209, 4 },{ 186, 223, 210, 37 },{ 211, 211, 211, 0 },{ 215, 211, 212, 4 },{ 211, 215, 213, 4 },{ 190, 227, 214, 37 },{ 215, 215, 215, 0 },
                { 219, 215, 216, 4 },{ 215, 219, 217, 4 },{ 186, 235, 218, 49 },{ 219, 219, 219, 0 },{ 223, 219, 220, 4 },{ 219, 223, 221, 4 },{ 190, 239, 222, 49 },{ 223, 223, 223, 0 },
                { 227, 223, 224, 4 },{ 223, 227, 225, 4 },{ 186, 247, 226, 61 },{ 227, 227, 227, 0 },{ 231, 227, 228, 4 },{ 227, 231, 229, 4 },{ 190, 251, 230, 61 },{ 231, 231, 231, 0 },
                { 235, 231, 232, 4 },{ 231, 235, 233, 4 },{ 235, 235, 235, 0 },{ 235, 235, 235, 0 },{ 239, 235, 236, 4 },{ 235, 239, 237, 4 },{ 239, 239, 239, 0 },{ 239, 239, 239, 0 },
                { 243, 239, 240, 4 },{ 239, 243, 241, 4 },{ 243, 243, 243, 0 },{ 243, 243, 243, 0 },{ 247, 243, 244, 4 },{ 243, 247, 245, 4 },{ 247, 247, 247, 0 },{ 247, 247, 247, 0 },
                { 251, 247, 248, 4 },{ 247, 251, 249, 4 },{ 251, 251, 251, 0 },{ 251, 251, 251, 0 },{ 255, 251, 252, 4 },{ 251, 255, 253, 4 },{ 255, 255, 255, 0 },{ 255, 255, 255, 0 },
            };

            SingleColorTableEntry g_singleColor5_2[256] =
            {
                { 0, 0, 0, 0 },{ 0, 0, 0, 0 },{ 0, 0, 0, 0 },{ 0, 8, 4, 8 },{ 0, 8, 4, 8 },{ 0, 8, 4, 8 },{ 8, 8, 8, 0 },{ 8, 8, 8, 0 },
                { 8, 8, 8, 0 },{ 8, 8, 8, 0 },{ 8, 8, 8, 0 },{ 8, 16, 12, 8 },{ 8, 16, 12, 8 },{ 8, 16, 12, 8 },{ 16, 16, 16, 0 },{ 16, 16, 16, 0 },
                { 16, 16, 16, 0 },{ 16, 16, 16, 0 },{ 16, 16, 16, 0 },{ 16, 24, 20, 8 },{ 16, 24, 20, 8 },{ 16, 24, 20, 8 },{ 24, 24, 24, 0 },{ 24, 24, 24, 0 },
                { 24, 24, 24, 0 },{ 24, 24, 24, 0 },{ 24, 24, 24, 0 },{ 24, 33, 28, 9 },{ 24, 33, 28, 9 },{ 24, 33, 28, 9 },{ 24, 33, 28, 9 },{ 24, 41, 32, 17 },
                { 24, 41, 32, 17 },{ 33, 33, 33, 0 },{ 33, 33, 33, 0 },{ 24, 49, 36, 25 },{ 24, 49, 36, 25 },{ 33, 41, 37, 8 },{ 33, 41, 37, 8 },{ 24, 57, 40, 33 },
                { 24, 57, 40, 33 },{ 41, 41, 41, 0 },{ 41, 41, 41, 0 },{ 41, 41, 41, 0 },{ 41, 49, 45, 8 },{ 41, 49, 45, 8 },{ 41, 49, 45, 8 },{ 49, 49, 49, 0 },
                { 49, 49, 49, 0 },{ 49, 49, 49, 0 },{ 49, 49, 49, 0 },{ 49, 49, 49, 0 },{ 49, 57, 53, 8 },{ 49, 57, 53, 8 },{ 49, 57, 53, 8 },{ 57, 57, 57, 0 },
                { 57, 57, 57, 0 },{ 57, 57, 57, 0 },{ 57, 57, 57, 0 },{ 57, 57, 57, 0 },{ 57, 66, 61, 9 },{ 57, 66, 61, 9 },{ 57, 66, 61, 9 },{ 57, 66, 61, 9 },
                { 57, 74, 65, 17 },{ 57, 74, 65, 17 },{ 66, 66, 66, 0 },{ 66, 66, 66, 0 },{ 57, 82, 69, 25 },{ 57, 82, 69, 25 },{ 66, 74, 70, 8 },{ 66, 74, 70, 8 },
                { 57, 90, 73, 33 },{ 57, 90, 73, 33 },{ 74, 74, 74, 0 },{ 74, 74, 74, 0 },{ 74, 74, 74, 0 },{ 74, 82, 78, 8 },{ 74, 82, 78, 8 },{ 74, 82, 78, 8 },
                { 82, 82, 82, 0 },{ 82, 82, 82, 0 },{ 82, 82, 82, 0 },{ 82, 82, 82, 0 },{ 82, 82, 82, 0 },{ 82, 90, 86, 8 },{ 82, 90, 86, 8 },{ 82, 90, 86, 8 },
                { 90, 90, 90, 0 },{ 90, 90, 90, 0 },{ 90, 90, 90, 0 },{ 90, 90, 90, 0 },{ 90, 90, 90, 0 },{ 90, 99, 94, 9 },{ 90, 99, 94, 9 },{ 90, 99, 94, 9 },
                { 90, 99, 94, 9 },{ 90, 107, 98, 17 },{ 90, 107, 98, 17 },{ 99, 99, 99, 0 },{ 99, 99, 99, 0 },{ 90, 115, 102, 25 },{ 90, 115, 102, 25 },{ 99, 107, 103, 8 },
                { 99, 107, 103, 8 },{ 90, 123, 106, 33 },{ 90, 123, 106, 33 },{ 107, 107, 107, 0 },{ 107, 107, 107, 0 },{ 107, 107, 107, 0 },{ 107, 115, 111, 8 },{ 107, 115, 111, 8 },
                { 107, 115, 111, 8 },{ 115, 115, 115, 0 },{ 115, 115, 115, 0 },{ 115, 115, 115, 0 },{ 115, 115, 115, 0 },{ 115, 115, 115, 0 },{ 115, 123, 119, 8 },{ 115, 123, 119, 8 },
                { 115, 123, 119, 8 },{ 123, 123, 123, 0 },{ 123, 123, 123, 0 },{ 123, 123, 123, 0 },{ 123, 123, 123, 0 },{ 123, 123, 123, 0 },{ 123, 132, 127, 9 },{ 123, 132, 127, 9 },
                { 123, 132, 127, 9 },{ 123, 132, 127, 9 },{ 123, 140, 131, 17 },{ 123, 140, 131, 17 },{ 132, 132, 132, 0 },{ 132, 132, 132, 0 },{ 123, 148, 135, 25 },{ 123, 148, 135, 25 },
                { 132, 140, 136, 8 },{ 132, 140, 136, 8 },{ 123, 156, 139, 33 },{ 123, 156, 139, 33 },{ 140, 140, 140, 0 },{ 140, 140, 140, 0 },{ 140, 140, 140, 0 },{ 140, 148, 144, 8 },
                { 140, 148, 144, 8 },{ 140, 148, 144, 8 },{ 148, 148, 148, 0 },{ 148, 148, 148, 0 },{ 148, 148, 148, 0 },{ 148, 148, 148, 0 },{ 148, 148, 148, 0 },{ 148, 156, 152, 8 },
                { 148, 156, 152, 8 },{ 148, 156, 152, 8 },{ 156, 156, 156, 0 },{ 156, 156, 156, 0 },{ 156, 156, 156, 0 },{ 156, 156, 156, 0 },{ 156, 156, 156, 0 },{ 156, 165, 160, 9 },
                { 156, 165, 160, 9 },{ 156, 165, 160, 9 },{ 156, 165, 160, 9 },{ 156, 173, 164, 17 },{ 156, 173, 164, 17 },{ 165, 165, 165, 0 },{ 165, 165, 165, 0 },{ 156, 181, 168, 25 },
                { 156, 181, 168, 25 },{ 165, 173, 169, 8 },{ 165, 173, 169, 8 },{ 156, 189, 172, 33 },{ 156, 189, 172, 33 },{ 173, 173, 173, 0 },{ 173, 173, 173, 0 },{ 173, 173, 173, 0 },
                { 173, 181, 177, 8 },{ 173, 181, 177, 8 },{ 173, 181, 177, 8 },{ 181, 181, 181, 0 },{ 181, 181, 181, 0 },{ 181, 181, 181, 0 },{ 181, 181, 181, 0 },{ 181, 181, 181, 0 },
                { 181, 189, 185, 8 },{ 181, 189, 185, 8 },{ 181, 189, 185, 8 },{ 189, 189, 189, 0 },{ 189, 189, 189, 0 },{ 189, 189, 189, 0 },{ 189, 189, 189, 0 },{ 189, 189, 189, 0 },
                { 189, 198, 193, 9 },{ 189, 198, 193, 9 },{ 189, 198, 193, 9 },{ 189, 198, 193, 9 },{ 189, 206, 197, 17 },{ 189, 206, 197, 17 },{ 198, 198, 198, 0 },{ 198, 198, 198, 0 },
                { 189, 214, 201, 25 },{ 189, 214, 201, 25 },{ 198, 206, 202, 8 },{ 198, 206, 202, 8 },{ 189, 222, 205, 33 },{ 189, 222, 205, 33 },{ 206, 206, 206, 0 },{ 206, 206, 206, 0 },
                { 206, 206, 206, 0 },{ 206, 214, 210, 8 },{ 206, 214, 210, 8 },{ 206, 214, 210, 8 },{ 214, 214, 214, 0 },{ 214, 214, 214, 0 },{ 214, 214, 214, 0 },{ 214, 214, 214, 0 },
                { 214, 214, 214, 0 },{ 214, 222, 218, 8 },{ 214, 222, 218, 8 },{ 214, 222, 218, 8 },{ 222, 222, 222, 0 },{ 222, 222, 222, 0 },{ 222, 222, 222, 0 },{ 222, 222, 222, 0 },
                { 222, 222, 222, 0 },{ 222, 231, 226, 9 },{ 222, 231, 226, 9 },{ 222, 231, 226, 9 },{ 222, 231, 226, 9 },{ 222, 239, 230, 17 },{ 222, 239, 230, 17 },{ 231, 231, 231, 0 },
                { 231, 231, 231, 0 },{ 222, 247, 234, 25 },{ 222, 247, 234, 25 },{ 231, 239, 235, 8 },{ 231, 239, 235, 8 },{ 222, 255, 238, 33 },{ 222, 255, 238, 33 },{ 239, 239, 239, 0 },
                { 239, 239, 239, 0 },{ 239, 239, 239, 0 },{ 239, 247, 243, 8 },{ 239, 247, 243, 8 },{ 239, 247, 243, 8 },{ 247, 247, 247, 0 },{ 247, 247, 247, 0 },{ 247, 247, 247, 0 },
                { 247, 247, 247, 0 },{ 247, 247, 247, 0 },{ 247, 255, 251, 8 },{ 247, 255, 251, 8 },{ 247, 255, 251, 8 },{ 255, 255, 255, 0 },{ 255, 255, 255, 0 },{ 255, 255, 255, 0 },
            };

            SingleColorTableEntry g_singleColor6_2[256] =
            {
                { 0, 0, 0, 0 },{ 0, 0, 0, 0 },{ 0, 4, 2, 4 },{ 4, 4, 4, 0 },{ 4, 4, 4, 0 },{ 4, 4, 4, 0 },{ 4, 8, 6, 4 },{ 8, 8, 8, 0 },
                { 8, 8, 8, 0 },{ 8, 8, 8, 0 },{ 8, 12, 10, 4 },{ 12, 12, 12, 0 },{ 12, 12, 12, 0 },{ 12, 12, 12, 0 },{ 12, 16, 14, 4 },{ 16, 16, 16, 0 },
                { 16, 16, 16, 0 },{ 16, 16, 16, 0 },{ 16, 20, 18, 4 },{ 20, 20, 20, 0 },{ 20, 20, 20, 0 },{ 20, 20, 20, 0 },{ 20, 24, 22, 4 },{ 24, 24, 24, 0 },
                { 24, 24, 24, 0 },{ 24, 24, 24, 0 },{ 24, 28, 26, 4 },{ 28, 28, 28, 0 },{ 28, 28, 28, 0 },{ 28, 28, 28, 0 },{ 28, 32, 30, 4 },{ 32, 32, 32, 0 },
                { 32, 32, 32, 0 },{ 32, 32, 32, 0 },{ 32, 36, 34, 4 },{ 36, 36, 36, 0 },{ 36, 36, 36, 0 },{ 36, 36, 36, 0 },{ 36, 40, 38, 4 },{ 40, 40, 40, 0 },
                { 40, 40, 40, 0 },{ 40, 40, 40, 0 },{ 40, 44, 42, 4 },{ 44, 44, 44, 0 },{ 44, 44, 44, 0 },{ 44, 44, 44, 0 },{ 44, 48, 46, 4 },{ 48, 48, 48, 0 },
                { 48, 48, 48, 0 },{ 48, 48, 48, 0 },{ 48, 52, 50, 4 },{ 52, 52, 52, 0 },{ 52, 52, 52, 0 },{ 52, 52, 52, 0 },{ 52, 56, 54, 4 },{ 56, 56, 56, 0 },
                { 56, 56, 56, 0 },{ 56, 56, 56, 0 },{ 56, 60, 58, 4 },{ 60, 60, 60, 0 },{ 60, 60, 60, 0 },{ 60, 60, 60, 0 },{ 60, 65, 62, 5 },{ 60, 65, 62, 5 },
                { 60, 69, 64, 9 },{ 65, 65, 65, 0 },{ 60, 73, 66, 13 },{ 65, 69, 67, 4 },{ 60, 77, 68, 17 },{ 69, 69, 69, 0 },{ 60, 81, 70, 21 },{ 69, 73, 71, 4 },
                { 60, 85, 72, 25 },{ 73, 73, 73, 0 },{ 60, 89, 74, 29 },{ 73, 77, 75, 4 },{ 60, 93, 76, 33 },{ 77, 77, 77, 0 },{ 60, 97, 78, 37 },{ 77, 81, 79, 4 },
                { 60, 101, 80, 41 },{ 81, 81, 81, 0 },{ 60, 105, 82, 45 },{ 81, 85, 83, 4 },{ 60, 109, 84, 49 },{ 85, 85, 85, 0 },{ 60, 113, 86, 53 },{ 85, 89, 87, 4 },
                { 60, 117, 88, 57 },{ 89, 89, 89, 0 },{ 60, 121, 90, 61 },{ 89, 93, 91, 4 },{ 60, 125, 92, 65 },{ 93, 93, 93, 0 },{ 93, 93, 93, 0 },{ 93, 97, 95, 4 },
                { 97, 97, 97, 0 },{ 97, 97, 97, 0 },{ 97, 97, 97, 0 },{ 97, 101, 99, 4 },{ 101, 101, 101, 0 },{ 101, 101, 101, 0 },{ 101, 101, 101, 0 },{ 101, 105, 103, 4 },
                { 105, 105, 105, 0 },{ 105, 105, 105, 0 },{ 105, 105, 105, 0 },{ 105, 109, 107, 4 },{ 109, 109, 109, 0 },{ 109, 109, 109, 0 },{ 109, 109, 109, 0 },{ 109, 113, 111, 4 },
                { 113, 113, 113, 0 },{ 113, 113, 113, 0 },{ 113, 113, 113, 0 },{ 113, 117, 115, 4 },{ 117, 117, 117, 0 },{ 117, 117, 117, 0 },{ 117, 117, 117, 0 },{ 117, 121, 119, 4 },
                { 121, 121, 121, 0 },{ 121, 121, 121, 0 },{ 121, 121, 121, 0 },{ 121, 125, 123, 4 },{ 125, 125, 125, 0 },{ 125, 125, 125, 0 },{ 125, 125, 125, 0 },{ 125, 130, 127, 5 },
                { 125, 130, 127, 5 },{ 125, 134, 129, 9 },{ 130, 130, 130, 0 },{ 125, 138, 131, 13 },{ 130, 134, 132, 4 },{ 125, 142, 133, 17 },{ 134, 134, 134, 0 },{ 125, 146, 135, 21 },
                { 134, 138, 136, 4 },{ 125, 150, 137, 25 },{ 138, 138, 138, 0 },{ 125, 154, 139, 29 },{ 138, 142, 140, 4 },{ 125, 158, 141, 33 },{ 142, 142, 142, 0 },{ 125, 162, 143, 37 },
                { 142, 146, 144, 4 },{ 125, 166, 145, 41 },{ 146, 146, 146, 0 },{ 125, 170, 147, 45 },{ 146, 150, 148, 4 },{ 125, 174, 149, 49 },{ 150, 150, 150, 0 },{ 125, 178, 151, 53 },
                { 150, 154, 152, 4 },{ 125, 182, 153, 57 },{ 154, 154, 154, 0 },{ 125, 186, 155, 61 },{ 154, 158, 156, 4 },{ 125, 190, 157, 65 },{ 158, 158, 158, 0 },{ 158, 158, 158, 0 },
                { 158, 162, 160, 4 },{ 162, 162, 162, 0 },{ 162, 162, 162, 0 },{ 162, 162, 162, 0 },{ 162, 166, 164, 4 },{ 166, 166, 166, 0 },{ 166, 166, 166, 0 },{ 166, 166, 166, 0 },
                { 166, 170, 168, 4 },{ 170, 170, 170, 0 },{ 170, 170, 170, 0 },{ 170, 170, 170, 0 },{ 170, 174, 172, 4 },{ 174, 174, 174, 0 },{ 174, 174, 174, 0 },{ 174, 174, 174, 0 },
                { 174, 178, 176, 4 },{ 178, 178, 178, 0 },{ 178, 178, 178, 0 },{ 178, 178, 178, 0 },{ 178, 182, 180, 4 },{ 182, 182, 182, 0 },{ 182, 182, 182, 0 },{ 182, 182, 182, 0 },
                { 182, 186, 184, 4 },{ 186, 186, 186, 0 },{ 186, 186, 186, 0 },{ 186, 186, 186, 0 },{ 186, 190, 188, 4 },{ 190, 190, 190, 0 },{ 190, 190, 190, 0 },{ 190, 190, 190, 0 },
                { 190, 195, 192, 5 },{ 190, 195, 192, 5 },{ 190, 199, 194, 9 },{ 195, 195, 195, 0 },{ 190, 203, 196, 13 },{ 195, 199, 197, 4 },{ 190, 207, 198, 17 },{ 199, 199, 199, 0 },
                { 190, 211, 200, 21 },{ 199, 203, 201, 4 },{ 190, 215, 202, 25 },{ 203, 203, 203, 0 },{ 190, 219, 204, 29 },{ 203, 207, 205, 4 },{ 190, 223, 206, 33 },{ 207, 207, 207, 0 },
                { 190, 227, 208, 37 },{ 207, 211, 209, 4 },{ 190, 231, 210, 41 },{ 211, 211, 211, 0 },{ 190, 235, 212, 45 },{ 211, 215, 213, 4 },{ 190, 239, 214, 49 },{ 215, 215, 215, 0 },
                { 190, 243, 216, 53 },{ 215, 219, 217, 4 },{ 190, 247, 218, 57 },{ 219, 219, 219, 0 },{ 190, 251, 220, 61 },{ 219, 223, 221, 4 },{ 190, 255, 222, 65 },{ 223, 223, 223, 0 },
                { 223, 223, 223, 0 },{ 223, 227, 225, 4 },{ 227, 227, 227, 0 },{ 227, 227, 227, 0 },{ 227, 227, 227, 0 },{ 227, 231, 229, 4 },{ 231, 231, 231, 0 },{ 231, 231, 231, 0 },
                { 231, 231, 231, 0 },{ 231, 235, 233, 4 },{ 235, 235, 235, 0 },{ 235, 235, 235, 0 },{ 235, 235, 235, 0 },{ 235, 239, 237, 4 },{ 239, 239, 239, 0 },{ 239, 239, 239, 0 },
                { 239, 239, 239, 0 },{ 239, 243, 241, 4 },{ 243, 243, 243, 0 },{ 243, 243, 243, 0 },{ 243, 243, 243, 0 },{ 243, 247, 245, 4 },{ 247, 247, 247, 0 },{ 247, 247, 247, 0 },
                { 247, 247, 247, 0 },{ 247, 251, 249, 4 },{ 251, 251, 251, 0 },{ 251, 251, 251, 0 },{ 251, 251, 251, 0 },{ 251, 255, 253, 4 },{ 255, 255, 255, 0 },{ 255, 255, 255, 0 },
            };

            SingleColorTableEntry g_singleColor5_3_p[256] =
            {
                { 0, 0, 0, 0 },{ 0, 0, 0, 0 },{ 8, 0, 2, 8 },{ 8, 0, 2, 8 },{ 0, 8, 5, 8 },{ 0, 8, 5, 8 },{ 0, 8, 5, 8 },{ 8, 8, 8, 0 },
                { 8, 8, 8, 0 },{ 8, 8, 8, 0 },{ 16, 8, 10, 8 },{ 33, 0, 11, 33 },{ 8, 16, 13, 8 },{ 8, 16, 13, 8 },{ 8, 16, 13, 8 },{ 16, 16, 16, 0 },
                { 16, 16, 16, 0 },{ 16, 16, 16, 0 },{ 24, 16, 18, 8 },{ 41, 8, 19, 33 },{ 16, 24, 21, 8 },{ 16, 24, 21, 8 },{ 0, 33, 22, 33 },{ 24, 24, 24, 0 },
                { 24, 24, 24, 0 },{ 24, 24, 24, 0 },{ 33, 24, 27, 9 },{ 33, 24, 27, 9 },{ 33, 24, 27, 9 },{ 41, 24, 29, 17 },{ 24, 33, 30, 9 },{ 24, 33, 30, 9 },
                { 16, 41, 32, 25 },{ 33, 33, 33, 0 },{ 33, 33, 33, 0 },{ 41, 33, 35, 8 },{ 41, 33, 35, 8 },{ 33, 41, 38, 8 },{ 33, 41, 38, 8 },{ 33, 41, 38, 8 },
                { 24, 49, 40, 25 },{ 41, 41, 41, 0 },{ 41, 41, 41, 0 },{ 49, 41, 43, 8 },{ 66, 33, 44, 33 },{ 41, 49, 46, 8 },{ 41, 49, 46, 8 },{ 41, 49, 46, 8 },
                { 49, 49, 49, 0 },{ 49, 49, 49, 0 },{ 49, 49, 49, 0 },{ 57, 49, 51, 8 },{ 74, 41, 52, 33 },{ 49, 57, 54, 8 },{ 49, 57, 54, 8 },{ 33, 66, 55, 33 },
                { 57, 57, 57, 0 },{ 57, 57, 57, 0 },{ 57, 57, 57, 0 },{ 66, 57, 60, 9 },{ 66, 57, 60, 9 },{ 66, 57, 60, 9 },{ 74, 57, 62, 17 },{ 57, 66, 63, 9 },
                { 57, 66, 63, 9 },{ 49, 74, 65, 25 },{ 66, 66, 66, 0 },{ 66, 66, 66, 0 },{ 74, 66, 68, 8 },{ 74, 66, 68, 8 },{ 66, 74, 71, 8 },{ 66, 74, 71, 8 },
                { 66, 74, 71, 8 },{ 57, 82, 73, 25 },{ 74, 74, 74, 0 },{ 74, 74, 74, 0 },{ 82, 74, 76, 8 },{ 99, 66, 77, 33 },{ 74, 82, 79, 8 },{ 74, 82, 79, 8 },
                { 74, 82, 79, 8 },{ 82, 82, 82, 0 },{ 82, 82, 82, 0 },{ 82, 82, 82, 0 },{ 90, 82, 84, 8 },{ 107, 74, 85, 33 },{ 82, 90, 87, 8 },{ 82, 90, 87, 8 },
                { 66, 99, 88, 33 },{ 90, 90, 90, 0 },{ 90, 90, 90, 0 },{ 90, 90, 90, 0 },{ 99, 90, 93, 9 },{ 99, 90, 93, 9 },{ 99, 90, 93, 9 },{ 107, 90, 95, 17 },
                { 90, 99, 96, 9 },{ 90, 99, 96, 9 },{ 82, 107, 98, 25 },{ 99, 99, 99, 0 },{ 99, 99, 99, 0 },{ 107, 99, 101, 8 },{ 107, 99, 101, 8 },{ 99, 107, 104, 8 },
                { 99, 107, 104, 8 },{ 99, 107, 104, 8 },{ 90, 115, 106, 25 },{ 107, 107, 107, 0 },{ 107, 107, 107, 0 },{ 115, 107, 109, 8 },{ 132, 99, 110, 33 },{ 107, 115, 112, 8 },
                { 107, 115, 112, 8 },{ 107, 115, 112, 8 },{ 115, 115, 115, 0 },{ 115, 115, 115, 0 },{ 115, 115, 115, 0 },{ 123, 115, 117, 8 },{ 140, 107, 118, 33 },{ 115, 123, 120, 8 },
                { 115, 123, 120, 8 },{ 99, 132, 121, 33 },{ 123, 123, 123, 0 },{ 123, 123, 123, 0 },{ 123, 123, 123, 0 },{ 132, 123, 126, 9 },{ 132, 123, 126, 9 },{ 132, 123, 126, 9 },
                { 140, 123, 128, 17 },{ 123, 132, 129, 9 },{ 123, 132, 129, 9 },{ 115, 140, 131, 25 },{ 132, 132, 132, 0 },{ 132, 132, 132, 0 },{ 140, 132, 134, 8 },{ 140, 132, 134, 8 },
                { 132, 140, 137, 8 },{ 132, 140, 137, 8 },{ 132, 140, 137, 8 },{ 123, 148, 139, 25 },{ 140, 140, 140, 0 },{ 140, 140, 140, 0 },{ 148, 140, 142, 8 },{ 165, 132, 143, 33 },
                { 140, 148, 145, 8 },{ 140, 148, 145, 8 },{ 140, 148, 145, 8 },{ 148, 148, 148, 0 },{ 148, 148, 148, 0 },{ 148, 148, 148, 0 },{ 156, 148, 150, 8 },{ 173, 140, 151, 33 },
                { 148, 156, 153, 8 },{ 148, 156, 153, 8 },{ 132, 165, 154, 33 },{ 156, 156, 156, 0 },{ 156, 156, 156, 0 },{ 156, 156, 156, 0 },{ 165, 156, 159, 9 },{ 165, 156, 159, 9 },
                { 165, 156, 159, 9 },{ 173, 156, 161, 17 },{ 156, 165, 162, 9 },{ 156, 165, 162, 9 },{ 148, 173, 164, 25 },{ 165, 165, 165, 0 },{ 165, 165, 165, 0 },{ 173, 165, 167, 8 },
                { 173, 165, 167, 8 },{ 165, 173, 170, 8 },{ 165, 173, 170, 8 },{ 165, 173, 170, 8 },{ 156, 181, 172, 25 },{ 173, 173, 173, 0 },{ 173, 173, 173, 0 },{ 181, 173, 175, 8 },
                { 198, 165, 176, 33 },{ 173, 181, 178, 8 },{ 173, 181, 178, 8 },{ 173, 181, 178, 8 },{ 181, 181, 181, 0 },{ 181, 181, 181, 0 },{ 181, 181, 181, 0 },{ 189, 181, 183, 8 },
                { 206, 173, 184, 33 },{ 181, 189, 186, 8 },{ 181, 189, 186, 8 },{ 165, 198, 187, 33 },{ 189, 189, 189, 0 },{ 189, 189, 189, 0 },{ 189, 189, 189, 0 },{ 198, 189, 192, 9 },
                { 198, 189, 192, 9 },{ 198, 189, 192, 9 },{ 206, 189, 194, 17 },{ 189, 198, 195, 9 },{ 189, 198, 195, 9 },{ 181, 206, 197, 25 },{ 198, 198, 198, 0 },{ 198, 198, 198, 0 },
                { 206, 198, 200, 8 },{ 206, 198, 200, 8 },{ 198, 206, 203, 8 },{ 198, 206, 203, 8 },{ 198, 206, 203, 8 },{ 189, 214, 205, 25 },{ 206, 206, 206, 0 },{ 206, 206, 206, 0 },
                { 214, 206, 208, 8 },{ 231, 198, 209, 33 },{ 206, 214, 211, 8 },{ 206, 214, 211, 8 },{ 206, 214, 211, 8 },{ 214, 214, 214, 0 },{ 214, 214, 214, 0 },{ 214, 214, 214, 0 },
                { 222, 214, 216, 8 },{ 239, 206, 217, 33 },{ 214, 222, 219, 8 },{ 214, 222, 219, 8 },{ 198, 231, 220, 33 },{ 222, 222, 222, 0 },{ 222, 222, 222, 0 },{ 222, 222, 222, 0 },
                { 231, 222, 225, 9 },{ 231, 222, 225, 9 },{ 231, 222, 225, 9 },{ 239, 222, 227, 17 },{ 222, 231, 228, 9 },{ 222, 231, 228, 9 },{ 214, 239, 230, 25 },{ 231, 231, 231, 0 },
                { 231, 231, 231, 0 },{ 239, 231, 233, 8 },{ 239, 231, 233, 8 },{ 231, 239, 236, 8 },{ 231, 239, 236, 8 },{ 231, 239, 236, 8 },{ 222, 247, 238, 25 },{ 239, 239, 239, 0 },
                { 239, 239, 239, 0 },{ 247, 239, 241, 8 },{ 247, 239, 241, 8 },{ 239, 247, 244, 8 },{ 239, 247, 244, 8 },{ 239, 247, 244, 8 },{ 247, 247, 247, 0 },{ 247, 247, 247, 0 },
                { 247, 247, 247, 0 },{ 255, 247, 249, 8 },{ 255, 247, 249, 8 },{ 247, 255, 252, 8 },{ 247, 255, 252, 8 },{ 247, 255, 252, 8 },{ 255, 255, 255, 0 },{ 255, 255, 255, 0 },
            };

            SingleColorTableEntry g_singleColor6_3_p[256] =
            {
                { 0, 0, 0, 0 },{ 4, 0, 1, 4 },{ 0, 4, 2, 4 },{ 4, 4, 4, 0 },{ 4, 4, 4, 0 },{ 8, 4, 5, 4 },{ 4, 8, 6, 4 },{ 8, 8, 8, 0 },
                { 8, 8, 8, 0 },{ 12, 8, 9, 4 },{ 8, 12, 10, 4 },{ 12, 12, 12, 0 },{ 12, 12, 12, 0 },{ 16, 12, 13, 4 },{ 12, 16, 14, 4 },{ 16, 16, 16, 0 },
                { 16, 16, 16, 0 },{ 20, 16, 17, 4 },{ 16, 20, 18, 4 },{ 20, 20, 20, 0 },{ 20, 20, 20, 0 },{ 24, 20, 21, 4 },{ 20, 24, 22, 4 },{ 24, 24, 24, 0 },
                { 24, 24, 24, 0 },{ 28, 24, 25, 4 },{ 24, 28, 26, 4 },{ 28, 28, 28, 0 },{ 28, 28, 28, 0 },{ 32, 28, 29, 4 },{ 28, 32, 30, 4 },{ 32, 32, 32, 0 },
                { 32, 32, 32, 0 },{ 36, 32, 33, 4 },{ 32, 36, 34, 4 },{ 36, 36, 36, 0 },{ 36, 36, 36, 0 },{ 40, 36, 37, 4 },{ 36, 40, 38, 4 },{ 40, 40, 40, 0 },
                { 40, 40, 40, 0 },{ 44, 40, 41, 4 },{ 40, 44, 42, 4 },{ 65, 32, 43, 33 },{ 44, 44, 44, 0 },{ 48, 44, 45, 4 },{ 44, 48, 46, 4 },{ 69, 36, 47, 33 },
                { 48, 48, 48, 0 },{ 52, 48, 49, 4 },{ 48, 52, 50, 4 },{ 65, 44, 51, 21 },{ 52, 52, 52, 0 },{ 56, 52, 53, 4 },{ 52, 56, 54, 4 },{ 69, 48, 55, 21 },
                { 56, 56, 56, 0 },{ 60, 56, 57, 4 },{ 56, 60, 58, 4 },{ 65, 56, 59, 9 },{ 60, 60, 60, 0 },{ 65, 60, 61, 5 },{ 56, 65, 62, 9 },{ 60, 65, 63, 5 },
                { 56, 69, 64, 13 },{ 65, 65, 65, 0 },{ 69, 65, 66, 4 },{ 65, 69, 67, 4 },{ 60, 73, 68, 13 },{ 69, 69, 69, 0 },{ 73, 69, 70, 4 },{ 69, 73, 71, 4 },
                { 56, 81, 72, 25 },{ 73, 73, 73, 0 },{ 77, 73, 74, 4 },{ 73, 77, 75, 4 },{ 60, 85, 76, 25 },{ 77, 77, 77, 0 },{ 81, 77, 78, 4 },{ 77, 81, 79, 4 },
                { 81, 81, 81, 0 },{ 81, 81, 81, 0 },{ 85, 81, 82, 4 },{ 81, 85, 83, 4 },{ 85, 85, 85, 0 },{ 85, 85, 85, 0 },{ 89, 85, 86, 4 },{ 85, 89, 87, 4 },
                { 89, 89, 89, 0 },{ 89, 89, 89, 0 },{ 93, 89, 90, 4 },{ 89, 93, 91, 4 },{ 93, 93, 93, 0 },{ 93, 93, 93, 0 },{ 97, 93, 94, 4 },{ 93, 97, 95, 4 },
                { 97, 97, 97, 0 },{ 97, 97, 97, 0 },{ 101, 97, 98, 4 },{ 97, 101, 99, 4 },{ 101, 101, 101, 0 },{ 101, 101, 101, 0 },{ 105, 101, 102, 4 },{ 101, 105, 103, 4 },
                { 105, 105, 105, 0 },{ 105, 105, 105, 0 },{ 109, 105, 106, 4 },{ 105, 109, 107, 4 },{ 130, 97, 108, 33 },{ 109, 109, 109, 0 },{ 113, 109, 110, 4 },{ 109, 113, 111, 4 },
                { 134, 101, 112, 33 },{ 113, 113, 113, 0 },{ 117, 113, 114, 4 },{ 113, 117, 115, 4 },{ 130, 109, 116, 21 },{ 117, 117, 117, 0 },{ 121, 117, 118, 4 },{ 117, 121, 119, 4 },
                { 134, 113, 120, 21 },{ 121, 121, 121, 0 },{ 125, 121, 122, 4 },{ 121, 125, 123, 4 },{ 130, 121, 124, 9 },{ 125, 125, 125, 0 },{ 130, 125, 126, 5 },{ 121, 130, 127, 9 },
                { 125, 130, 128, 5 },{ 121, 134, 129, 13 },{ 130, 130, 130, 0 },{ 134, 130, 131, 4 },{ 130, 134, 132, 4 },{ 125, 138, 133, 13 },{ 134, 134, 134, 0 },{ 138, 134, 135, 4 },
                { 134, 138, 136, 4 },{ 121, 146, 137, 25 },{ 138, 138, 138, 0 },{ 142, 138, 139, 4 },{ 138, 142, 140, 4 },{ 125, 150, 141, 25 },{ 142, 142, 142, 0 },{ 146, 142, 143, 4 },
                { 142, 146, 144, 4 },{ 146, 146, 146, 0 },{ 146, 146, 146, 0 },{ 150, 146, 147, 4 },{ 146, 150, 148, 4 },{ 150, 150, 150, 0 },{ 150, 150, 150, 0 },{ 154, 150, 151, 4 },
                { 150, 154, 152, 4 },{ 154, 154, 154, 0 },{ 154, 154, 154, 0 },{ 158, 154, 155, 4 },{ 154, 158, 156, 4 },{ 158, 158, 158, 0 },{ 158, 158, 158, 0 },{ 162, 158, 159, 4 },
                { 158, 162, 160, 4 },{ 162, 162, 162, 0 },{ 162, 162, 162, 0 },{ 166, 162, 163, 4 },{ 162, 166, 164, 4 },{ 166, 166, 166, 0 },{ 166, 166, 166, 0 },{ 170, 166, 167, 4 },
                { 166, 170, 168, 4 },{ 170, 170, 170, 0 },{ 170, 170, 170, 0 },{ 174, 170, 171, 4 },{ 170, 174, 172, 4 },{ 195, 162, 173, 33 },{ 174, 174, 174, 0 },{ 178, 174, 175, 4 },
                { 174, 178, 176, 4 },{ 199, 166, 177, 33 },{ 178, 178, 178, 0 },{ 182, 178, 179, 4 },{ 178, 182, 180, 4 },{ 195, 174, 181, 21 },{ 182, 182, 182, 0 },{ 186, 182, 183, 4 },
                { 182, 186, 184, 4 },{ 199, 178, 185, 21 },{ 186, 186, 186, 0 },{ 190, 186, 187, 4 },{ 186, 190, 188, 4 },{ 195, 186, 189, 9 },{ 190, 190, 190, 0 },{ 195, 190, 191, 5 },
                { 186, 195, 192, 9 },{ 190, 195, 193, 5 },{ 186, 199, 194, 13 },{ 195, 195, 195, 0 },{ 199, 195, 196, 4 },{ 195, 199, 197, 4 },{ 190, 203, 198, 13 },{ 199, 199, 199, 0 },
                { 203, 199, 200, 4 },{ 199, 203, 201, 4 },{ 186, 211, 202, 25 },{ 203, 203, 203, 0 },{ 207, 203, 204, 4 },{ 203, 207, 205, 4 },{ 190, 215, 206, 25 },{ 207, 207, 207, 0 },
                { 211, 207, 208, 4 },{ 207, 211, 209, 4 },{ 211, 211, 211, 0 },{ 211, 211, 211, 0 },{ 215, 211, 212, 4 },{ 211, 215, 213, 4 },{ 215, 215, 215, 0 },{ 215, 215, 215, 0 },
                { 219, 215, 216, 4 },{ 215, 219, 217, 4 },{ 219, 219, 219, 0 },{ 219, 219, 219, 0 },{ 223, 219, 220, 4 },{ 219, 223, 221, 4 },{ 223, 223, 223, 0 },{ 223, 223, 223, 0 },
                { 227, 223, 224, 4 },{ 223, 227, 225, 4 },{ 227, 227, 227, 0 },{ 227, 227, 227, 0 },{ 231, 227, 228, 4 },{ 227, 231, 229, 4 },{ 231, 231, 231, 0 },{ 231, 231, 231, 0 },
                { 235, 231, 232, 4 },{ 231, 235, 233, 4 },{ 235, 235, 235, 0 },{ 235, 235, 235, 0 },{ 239, 235, 236, 4 },{ 235, 239, 237, 4 },{ 239, 239, 239, 0 },{ 239, 239, 239, 0 },
                { 243, 239, 240, 4 },{ 239, 243, 241, 4 },{ 243, 243, 243, 0 },{ 243, 243, 243, 0 },{ 247, 243, 244, 4 },{ 243, 247, 245, 4 },{ 247, 247, 247, 0 },{ 247, 247, 247, 0 },
                { 251, 247, 248, 4 },{ 247, 251, 249, 4 },{ 251, 251, 251, 0 },{ 251, 251, 251, 0 },{ 255, 251, 252, 4 },{ 251, 255, 253, 4 },{ 255, 255, 255, 0 },{ 255, 255, 255, 0 },
            };

            SingleColorTableEntry g_singleColor5_2_p[256] =
            {
                { 0, 0, 0, 0 },{ 0, 0, 0, 0 },{ 0, 0, 0, 0 },{ 0, 8, 4, 8 },{ 0, 8, 4, 8 },{ 0, 8, 4, 8 },{ 8, 8, 8, 0 },{ 8, 8, 8, 0 },
                { 8, 8, 8, 0 },{ 8, 8, 8, 0 },{ 8, 8, 8, 0 },{ 8, 16, 12, 8 },{ 8, 16, 12, 8 },{ 8, 16, 12, 8 },{ 16, 16, 16, 0 },{ 16, 16, 16, 0 },
                { 16, 16, 16, 0 },{ 16, 16, 16, 0 },{ 16, 16, 16, 0 },{ 16, 24, 20, 8 },{ 16, 24, 20, 8 },{ 16, 24, 20, 8 },{ 24, 24, 24, 0 },{ 24, 24, 24, 0 },
                { 24, 24, 24, 0 },{ 24, 24, 24, 0 },{ 24, 24, 24, 0 },{ 24, 33, 28, 9 },{ 24, 33, 28, 9 },{ 24, 33, 28, 9 },{ 24, 33, 28, 9 },{ 24, 41, 32, 17 },
                { 24, 41, 32, 17 },{ 33, 33, 33, 0 },{ 33, 33, 33, 0 },{ 24, 49, 36, 25 },{ 24, 49, 36, 25 },{ 33, 41, 37, 8 },{ 33, 41, 37, 8 },{ 24, 57, 40, 33 },
                { 24, 57, 40, 33 },{ 41, 41, 41, 0 },{ 41, 41, 41, 0 },{ 41, 41, 41, 0 },{ 41, 49, 45, 8 },{ 41, 49, 45, 8 },{ 41, 49, 45, 8 },{ 49, 49, 49, 0 },
                { 49, 49, 49, 0 },{ 49, 49, 49, 0 },{ 49, 49, 49, 0 },{ 49, 49, 49, 0 },{ 49, 57, 53, 8 },{ 49, 57, 53, 8 },{ 49, 57, 53, 8 },{ 57, 57, 57, 0 },
                { 57, 57, 57, 0 },{ 57, 57, 57, 0 },{ 57, 57, 57, 0 },{ 57, 57, 57, 0 },{ 57, 66, 61, 9 },{ 57, 66, 61, 9 },{ 57, 66, 61, 9 },{ 57, 66, 61, 9 },
                { 57, 74, 65, 17 },{ 57, 74, 65, 17 },{ 66, 66, 66, 0 },{ 66, 66, 66, 0 },{ 57, 82, 69, 25 },{ 57, 82, 69, 25 },{ 66, 74, 70, 8 },{ 66, 74, 70, 8 },
                { 57, 90, 73, 33 },{ 57, 90, 73, 33 },{ 74, 74, 74, 0 },{ 74, 74, 74, 0 },{ 74, 74, 74, 0 },{ 74, 82, 78, 8 },{ 74, 82, 78, 8 },{ 74, 82, 78, 8 },
                { 82, 82, 82, 0 },{ 82, 82, 82, 0 },{ 82, 82, 82, 0 },{ 82, 82, 82, 0 },{ 82, 82, 82, 0 },{ 82, 90, 86, 8 },{ 82, 90, 86, 8 },{ 82, 90, 86, 8 },
                { 90, 90, 90, 0 },{ 90, 90, 90, 0 },{ 90, 90, 90, 0 },{ 90, 90, 90, 0 },{ 90, 90, 90, 0 },{ 90, 99, 94, 9 },{ 90, 99, 94, 9 },{ 90, 99, 94, 9 },
                { 90, 99, 94, 9 },{ 90, 107, 98, 17 },{ 90, 107, 98, 17 },{ 99, 99, 99, 0 },{ 99, 99, 99, 0 },{ 90, 115, 102, 25 },{ 90, 115, 102, 25 },{ 99, 107, 103, 8 },
                { 99, 107, 103, 8 },{ 90, 123, 106, 33 },{ 90, 123, 106, 33 },{ 107, 107, 107, 0 },{ 107, 107, 107, 0 },{ 107, 107, 107, 0 },{ 107, 115, 111, 8 },{ 107, 115, 111, 8 },
                { 107, 115, 111, 8 },{ 115, 115, 115, 0 },{ 115, 115, 115, 0 },{ 115, 115, 115, 0 },{ 115, 115, 115, 0 },{ 115, 115, 115, 0 },{ 115, 123, 119, 8 },{ 115, 123, 119, 8 },
                { 115, 123, 119, 8 },{ 123, 123, 123, 0 },{ 123, 123, 123, 0 },{ 123, 123, 123, 0 },{ 123, 123, 123, 0 },{ 123, 123, 123, 0 },{ 123, 132, 127, 9 },{ 123, 132, 127, 9 },
                { 123, 132, 127, 9 },{ 123, 132, 127, 9 },{ 123, 140, 131, 17 },{ 123, 140, 131, 17 },{ 132, 132, 132, 0 },{ 132, 132, 132, 0 },{ 123, 148, 135, 25 },{ 123, 148, 135, 25 },
                { 132, 140, 136, 8 },{ 132, 140, 136, 8 },{ 123, 156, 139, 33 },{ 123, 156, 139, 33 },{ 140, 140, 140, 0 },{ 140, 140, 140, 0 },{ 140, 140, 140, 0 },{ 140, 148, 144, 8 },
                { 140, 148, 144, 8 },{ 140, 148, 144, 8 },{ 148, 148, 148, 0 },{ 148, 148, 148, 0 },{ 148, 148, 148, 0 },{ 148, 148, 148, 0 },{ 148, 148, 148, 0 },{ 148, 156, 152, 8 },
                { 148, 156, 152, 8 },{ 148, 156, 152, 8 },{ 156, 156, 156, 0 },{ 156, 156, 156, 0 },{ 156, 156, 156, 0 },{ 156, 156, 156, 0 },{ 156, 156, 156, 0 },{ 156, 165, 160, 9 },
                { 156, 165, 160, 9 },{ 156, 165, 160, 9 },{ 156, 165, 160, 9 },{ 156, 173, 164, 17 },{ 156, 173, 164, 17 },{ 165, 165, 165, 0 },{ 165, 165, 165, 0 },{ 156, 181, 168, 25 },
                { 156, 181, 168, 25 },{ 165, 173, 169, 8 },{ 165, 173, 169, 8 },{ 156, 189, 172, 33 },{ 156, 189, 172, 33 },{ 173, 173, 173, 0 },{ 173, 173, 173, 0 },{ 173, 173, 173, 0 },
                { 173, 181, 177, 8 },{ 173, 181, 177, 8 },{ 173, 181, 177, 8 },{ 181, 181, 181, 0 },{ 181, 181, 181, 0 },{ 181, 181, 181, 0 },{ 181, 181, 181, 0 },{ 181, 181, 181, 0 },
                { 181, 189, 185, 8 },{ 181, 189, 185, 8 },{ 181, 189, 185, 8 },{ 189, 189, 189, 0 },{ 189, 189, 189, 0 },{ 189, 189, 189, 0 },{ 189, 189, 189, 0 },{ 189, 189, 189, 0 },
                { 189, 198, 193, 9 },{ 189, 198, 193, 9 },{ 189, 198, 193, 9 },{ 189, 198, 193, 9 },{ 189, 206, 197, 17 },{ 189, 206, 197, 17 },{ 198, 198, 198, 0 },{ 198, 198, 198, 0 },
                { 189, 214, 201, 25 },{ 189, 214, 201, 25 },{ 198, 206, 202, 8 },{ 198, 206, 202, 8 },{ 189, 222, 205, 33 },{ 189, 222, 205, 33 },{ 206, 206, 206, 0 },{ 206, 206, 206, 0 },
                { 206, 206, 206, 0 },{ 206, 214, 210, 8 },{ 206, 214, 210, 8 },{ 206, 214, 210, 8 },{ 214, 214, 214, 0 },{ 214, 214, 214, 0 },{ 214, 214, 214, 0 },{ 214, 214, 214, 0 },
                { 214, 214, 214, 0 },{ 214, 222, 218, 8 },{ 214, 222, 218, 8 },{ 214, 222, 218, 8 },{ 222, 222, 222, 0 },{ 222, 222, 222, 0 },{ 222, 222, 222, 0 },{ 222, 222, 222, 0 },
                { 222, 222, 222, 0 },{ 222, 231, 226, 9 },{ 222, 231, 226, 9 },{ 222, 231, 226, 9 },{ 222, 231, 226, 9 },{ 222, 239, 230, 17 },{ 222, 239, 230, 17 },{ 231, 231, 231, 0 },
                { 231, 231, 231, 0 },{ 222, 247, 234, 25 },{ 222, 247, 234, 25 },{ 231, 239, 235, 8 },{ 231, 239, 235, 8 },{ 222, 255, 238, 33 },{ 222, 255, 238, 33 },{ 239, 239, 239, 0 },
                { 239, 239, 239, 0 },{ 239, 239, 239, 0 },{ 239, 247, 243, 8 },{ 239, 247, 243, 8 },{ 239, 247, 243, 8 },{ 247, 247, 247, 0 },{ 247, 247, 247, 0 },{ 247, 247, 247, 0 },
                { 247, 247, 247, 0 },{ 247, 247, 247, 0 },{ 247, 255, 251, 8 },{ 247, 255, 251, 8 },{ 247, 255, 251, 8 },{ 255, 255, 255, 0 },{ 255, 255, 255, 0 },{ 255, 255, 255, 0 },
            };

            SingleColorTableEntry g_singleColor6_2_p[256] =
            {
                { 0, 0, 0, 0 },{ 0, 0, 0, 0 },{ 0, 4, 2, 4 },{ 4, 4, 4, 0 },{ 4, 4, 4, 0 },{ 4, 4, 4, 0 },{ 4, 8, 6, 4 },{ 8, 8, 8, 0 },
                { 8, 8, 8, 0 },{ 8, 8, 8, 0 },{ 8, 12, 10, 4 },{ 12, 12, 12, 0 },{ 12, 12, 12, 0 },{ 12, 12, 12, 0 },{ 12, 16, 14, 4 },{ 16, 16, 16, 0 },
                { 16, 16, 16, 0 },{ 16, 16, 16, 0 },{ 16, 20, 18, 4 },{ 20, 20, 20, 0 },{ 20, 20, 20, 0 },{ 20, 20, 20, 0 },{ 20, 24, 22, 4 },{ 24, 24, 24, 0 },
                { 24, 24, 24, 0 },{ 24, 24, 24, 0 },{ 24, 28, 26, 4 },{ 28, 28, 28, 0 },{ 28, 28, 28, 0 },{ 28, 28, 28, 0 },{ 28, 32, 30, 4 },{ 32, 32, 32, 0 },
                { 32, 32, 32, 0 },{ 32, 32, 32, 0 },{ 32, 36, 34, 4 },{ 36, 36, 36, 0 },{ 36, 36, 36, 0 },{ 36, 36, 36, 0 },{ 36, 40, 38, 4 },{ 40, 40, 40, 0 },
                { 40, 40, 40, 0 },{ 40, 40, 40, 0 },{ 40, 44, 42, 4 },{ 44, 44, 44, 0 },{ 44, 44, 44, 0 },{ 44, 44, 44, 0 },{ 44, 48, 46, 4 },{ 48, 48, 48, 0 },
                { 48, 48, 48, 0 },{ 48, 48, 48, 0 },{ 48, 52, 50, 4 },{ 52, 52, 52, 0 },{ 52, 52, 52, 0 },{ 52, 52, 52, 0 },{ 52, 56, 54, 4 },{ 56, 56, 56, 0 },
                { 56, 56, 56, 0 },{ 56, 56, 56, 0 },{ 56, 60, 58, 4 },{ 60, 60, 60, 0 },{ 60, 60, 60, 0 },{ 60, 60, 60, 0 },{ 60, 65, 62, 5 },{ 60, 65, 62, 5 },
                { 60, 69, 64, 9 },{ 65, 65, 65, 0 },{ 60, 73, 66, 13 },{ 65, 69, 67, 4 },{ 60, 77, 68, 17 },{ 69, 69, 69, 0 },{ 60, 81, 70, 21 },{ 69, 73, 71, 4 },
                { 60, 85, 72, 25 },{ 73, 73, 73, 0 },{ 60, 89, 74, 29 },{ 73, 77, 75, 4 },{ 60, 93, 76, 33 },{ 77, 77, 77, 0 },{ 77, 77, 77, 0 },{ 77, 81, 79, 4 },
                { 81, 81, 81, 0 },{ 81, 81, 81, 0 },{ 81, 81, 81, 0 },{ 81, 85, 83, 4 },{ 85, 85, 85, 0 },{ 85, 85, 85, 0 },{ 85, 85, 85, 0 },{ 85, 89, 87, 4 },
                { 89, 89, 89, 0 },{ 89, 89, 89, 0 },{ 89, 89, 89, 0 },{ 89, 93, 91, 4 },{ 93, 93, 93, 0 },{ 93, 93, 93, 0 },{ 93, 93, 93, 0 },{ 93, 97, 95, 4 },
                { 97, 97, 97, 0 },{ 97, 97, 97, 0 },{ 97, 97, 97, 0 },{ 97, 101, 99, 4 },{ 101, 101, 101, 0 },{ 101, 101, 101, 0 },{ 101, 101, 101, 0 },{ 101, 105, 103, 4 },
                { 105, 105, 105, 0 },{ 105, 105, 105, 0 },{ 105, 105, 105, 0 },{ 105, 109, 107, 4 },{ 109, 109, 109, 0 },{ 109, 109, 109, 0 },{ 109, 109, 109, 0 },{ 109, 113, 111, 4 },
                { 113, 113, 113, 0 },{ 113, 113, 113, 0 },{ 113, 113, 113, 0 },{ 113, 117, 115, 4 },{ 117, 117, 117, 0 },{ 117, 117, 117, 0 },{ 117, 117, 117, 0 },{ 117, 121, 119, 4 },
                { 121, 121, 121, 0 },{ 121, 121, 121, 0 },{ 121, 121, 121, 0 },{ 121, 125, 123, 4 },{ 125, 125, 125, 0 },{ 125, 125, 125, 0 },{ 125, 125, 125, 0 },{ 125, 130, 127, 5 },
                { 125, 130, 127, 5 },{ 125, 134, 129, 9 },{ 130, 130, 130, 0 },{ 125, 138, 131, 13 },{ 130, 134, 132, 4 },{ 125, 142, 133, 17 },{ 134, 134, 134, 0 },{ 125, 146, 135, 21 },
                { 134, 138, 136, 4 },{ 125, 150, 137, 25 },{ 138, 138, 138, 0 },{ 125, 154, 139, 29 },{ 138, 142, 140, 4 },{ 125, 158, 141, 33 },{ 142, 142, 142, 0 },{ 142, 142, 142, 0 },
                { 142, 146, 144, 4 },{ 146, 146, 146, 0 },{ 146, 146, 146, 0 },{ 146, 146, 146, 0 },{ 146, 150, 148, 4 },{ 150, 150, 150, 0 },{ 150, 150, 150, 0 },{ 150, 150, 150, 0 },
                { 150, 154, 152, 4 },{ 154, 154, 154, 0 },{ 154, 154, 154, 0 },{ 154, 154, 154, 0 },{ 154, 158, 156, 4 },{ 158, 158, 158, 0 },{ 158, 158, 158, 0 },{ 158, 158, 158, 0 },
                { 158, 162, 160, 4 },{ 162, 162, 162, 0 },{ 162, 162, 162, 0 },{ 162, 162, 162, 0 },{ 162, 166, 164, 4 },{ 166, 166, 166, 0 },{ 166, 166, 166, 0 },{ 166, 166, 166, 0 },
                { 166, 170, 168, 4 },{ 170, 170, 170, 0 },{ 170, 170, 170, 0 },{ 170, 170, 170, 0 },{ 170, 174, 172, 4 },{ 174, 174, 174, 0 },{ 174, 174, 174, 0 },{ 174, 174, 174, 0 },
                { 174, 178, 176, 4 },{ 178, 178, 178, 0 },{ 178, 178, 178, 0 },{ 178, 178, 178, 0 },{ 178, 182, 180, 4 },{ 182, 182, 182, 0 },{ 182, 182, 182, 0 },{ 182, 182, 182, 0 },
                { 182, 186, 184, 4 },{ 186, 186, 186, 0 },{ 186, 186, 186, 0 },{ 186, 186, 186, 0 },{ 186, 190, 188, 4 },{ 190, 190, 190, 0 },{ 190, 190, 190, 0 },{ 190, 190, 190, 0 },
                { 190, 195, 192, 5 },{ 190, 195, 192, 5 },{ 190, 199, 194, 9 },{ 195, 195, 195, 0 },{ 190, 203, 196, 13 },{ 195, 199, 197, 4 },{ 190, 207, 198, 17 },{ 199, 199, 199, 0 },
                { 190, 211, 200, 21 },{ 199, 203, 201, 4 },{ 190, 215, 202, 25 },{ 203, 203, 203, 0 },{ 190, 219, 204, 29 },{ 203, 207, 205, 4 },{ 190, 223, 206, 33 },{ 207, 207, 207, 0 },
                { 207, 207, 207, 0 },{ 207, 211, 209, 4 },{ 211, 211, 211, 0 },{ 211, 211, 211, 0 },{ 211, 211, 211, 0 },{ 211, 215, 213, 4 },{ 215, 215, 215, 0 },{ 215, 215, 215, 0 },
                { 215, 215, 215, 0 },{ 215, 219, 217, 4 },{ 219, 219, 219, 0 },{ 219, 219, 219, 0 },{ 219, 219, 219, 0 },{ 219, 223, 221, 4 },{ 223, 223, 223, 0 },{ 223, 223, 223, 0 },
                { 223, 223, 223, 0 },{ 223, 227, 225, 4 },{ 227, 227, 227, 0 },{ 227, 227, 227, 0 },{ 227, 227, 227, 0 },{ 227, 231, 229, 4 },{ 231, 231, 231, 0 },{ 231, 231, 231, 0 },
                { 231, 231, 231, 0 },{ 231, 235, 233, 4 },{ 235, 235, 235, 0 },{ 235, 235, 235, 0 },{ 235, 235, 235, 0 },{ 235, 239, 237, 4 },{ 239, 239, 239, 0 },{ 239, 239, 239, 0 },
                { 239, 239, 239, 0 },{ 239, 243, 241, 4 },{ 243, 243, 243, 0 },{ 243, 243, 243, 0 },{ 243, 243, 243, 0 },{ 243, 247, 245, 4 },{ 247, 247, 247, 0 },{ 247, 247, 247, 0 },
                { 247, 247, 247, 0 },{ 247, 251, 249, 4 },{ 251, 251, 251, 0 },{ 251, 251, 251, 0 },{ 251, 251, 251, 0 },{ 251, 255, 253, 4 },{ 255, 255, 255, 0 },{ 255, 255, 255, 0 },
            };
        }
    }
}

void cvtt::Internal::S3TCComputer::Init(MFloat& error)
{
    error = ParallelMath::MakeFloat(FLT_MAX);
}

void cvtt::Internal::S3TCComputer::QuantizeTo6Bits(MUInt15& v)
{
    MUInt15 reduced = ParallelMath::LosslessCast<MUInt15>::Cast(ParallelMath::RightShift(ParallelMath::CompactMultiply(v, ParallelMath::MakeUInt15(253)) + ParallelMath::MakeUInt16(512), 10));
    v = (reduced << 2) | ParallelMath::RightShift(reduced, 4);
}

void cvtt::Internal::S3TCComputer::QuantizeTo5Bits(MUInt15& v)
{
    MUInt15 reduced = ParallelMath::LosslessCast<MUInt15>::Cast(ParallelMath::RightShift(ParallelMath::CompactMultiply(v, ParallelMath::MakeUInt15(249)) + ParallelMath::MakeUInt16(1024), 11));
    v = (reduced << 3) | ParallelMath::RightShift(reduced, 2);
}

void cvtt::Internal::S3TCComputer::QuantizeTo565(MUInt15 endPoint[3])
{
    QuantizeTo5Bits(endPoint[0]);
    QuantizeTo6Bits(endPoint[1]);
    QuantizeTo5Bits(endPoint[2]);
}

cvtt::ParallelMath::Float cvtt::Internal::S3TCComputer::ParanoidFactorForSpan(const MSInt16& span)
{
    return ParallelMath::Abs(ParallelMath::ToFloat(span)) * 0.03f;
}

cvtt::ParallelMath::Float cvtt::Internal::S3TCComputer::ParanoidDiff(const MUInt15& a, const MUInt15& b, const MFloat& d)
{
    MFloat absDiff = ParallelMath::Abs(ParallelMath::ToFloat(ParallelMath::LosslessCast<MSInt16>::Cast(a) - ParallelMath::LosslessCast<MSInt16>::Cast(b)));
    absDiff = absDiff + d;
    return absDiff * absDiff;
}

void cvtt::Internal::S3TCComputer::TestSingleColor(uint32_t flags, const MUInt15 pixels[16][4], const MFloat floatPixels[16][4], int range, const float* channelWeights,
    MFloat &bestError, MUInt15 bestEndpoints[2][3], MUInt15 bestIndexes[16], MUInt15 &bestRange, const ParallelMath::RoundTowardNearestForScope *rtn)
{
    float channelWeightsSq[3];

    for (int ch = 0; ch < 3; ch++)
        channelWeightsSq[ch] = channelWeights[ch] * channelWeights[ch];

    MUInt15 totals[3] = { ParallelMath::MakeUInt15(0), ParallelMath::MakeUInt15(0), ParallelMath::MakeUInt15(0) };

    for (int px = 0; px < 16; px++)
    {
        for (int ch = 0; ch < 3; ch++)
            totals[ch] = totals[ch] + pixels[px][ch];
    }

    MUInt15 average[3];
    for (int ch = 0; ch < 3; ch++)
        average[ch] = ParallelMath::RightShift(totals[ch] + ParallelMath::MakeUInt15(8), 4);

    const S3TCSingleColorTables::SingleColorTableEntry* rbTable = NULL;
    const S3TCSingleColorTables::SingleColorTableEntry* gTable = NULL;
    if (flags & cvtt::Flags::S3TC_Paranoid)
    {
        if (range == 4)
        {
            rbTable = S3TCSingleColorTables::g_singleColor5_3_p;
            gTable = S3TCSingleColorTables::g_singleColor6_3_p;
        }
        else
        {
            assert(range == 3);
            rbTable = S3TCSingleColorTables::g_singleColor5_2_p;
            gTable = S3TCSingleColorTables::g_singleColor6_2_p;
        }
    }
    else
    {
        if (range == 4)
        {
            rbTable = S3TCSingleColorTables::g_singleColor5_3;
            gTable = S3TCSingleColorTables::g_singleColor6_3;
        }
        else
        {
            assert(range == 3);
            rbTable = S3TCSingleColorTables::g_singleColor5_2;
            gTable = S3TCSingleColorTables::g_singleColor6_2;
        }
    }

    MUInt15 interpolated[3];
    MUInt15 eps[2][3];
    MSInt16 spans[3];
    for (int i = 0; i < ParallelMath::ParallelSize; i++)
    {
        for (int ch = 0; ch < 3; ch++)
        {
            uint16_t avg = ParallelMath::Extract(average[ch], i);
            const S3TCSingleColorTables::SingleColorTableEntry& tableEntry = ((ch == 1) ? gTable[avg] : rbTable[avg]);
            ParallelMath::PutUInt15(eps[0][ch], i, tableEntry.m_min);
            ParallelMath::PutUInt15(eps[1][ch], i, tableEntry.m_max);
            ParallelMath::PutUInt15(interpolated[ch], i, tableEntry.m_actualColor);
            ParallelMath::PutSInt16(spans[ch], i, tableEntry.m_span);
        }
    }

    MFloat error = ParallelMath::MakeFloatZero();
    if (flags & cvtt::Flags::S3TC_Paranoid)
    {
        MFloat spanParanoidFactors[3];
        for (int ch = 0; ch < 3; ch++)
            spanParanoidFactors[ch] = ParanoidFactorForSpan(spans[ch]);

        for (int px = 0; px < 16; px++)
        {
            for (int ch = 0; ch < 3; ch++)
                error = error + ParanoidDiff(interpolated[ch], pixels[px][ch], spanParanoidFactors[ch]) * channelWeightsSq[ch];
        }
    }
    else
    {
        for (int px = 0; px < 16; px++)
        {
            for (int ch = 0; ch < 3; ch++)
                error = error + ParallelMath::ToFloat(ParallelMath::SqDiffUInt8(interpolated[ch], pixels[px][ch])) * channelWeightsSq[ch];
        }
    }

    ParallelMath::FloatCompFlag better = ParallelMath::Less(error, bestError);
    ParallelMath::Int16CompFlag better16 = ParallelMath::FloatFlagToInt16(better);

    if (ParallelMath::AnySet(better16))
    {
        bestError = ParallelMath::Min(bestError, error);
        for (int epi = 0; epi < 2; epi++)
            for (int ch = 0; ch < 3; ch++)
                ParallelMath::ConditionalSet(bestEndpoints[epi][ch], better16, eps[epi][ch]);

        MUInt15 vindexes = ParallelMath::MakeUInt15(range == 4 ? 2 : 1);
        for (int px = 0; px < 16; px++)
            ParallelMath::ConditionalSet(bestIndexes[px], better16, vindexes);

        ParallelMath::ConditionalSet(bestRange, better16, ParallelMath::MakeUInt15(range));
    }
}

void cvtt::Internal::S3TCComputer::TestEndpoints(uint32_t flags, const MUInt15 pixels[16][4], const MFloat floatPixels[16][4], const MFloat preWeightedPixels[16][4], const MUInt15 unquantizedEndPoints[2][3], int range, const float* channelWeights,
    MFloat &bestError, MUInt15 bestEndpoints[2][3], MUInt15 bestIndexes[16], MUInt15 &bestRange, EndpointRefiner<3> *refiner, const ParallelMath::RoundTowardNearestForScope *rtn)
{
    float channelWeightsSq[3];

    for (int ch = 0; ch < 3; ch++)
        channelWeightsSq[ch] = channelWeights[ch] * channelWeights[ch];

    MUInt15 endPoints[2][3];

    for (int ep = 0; ep < 2; ep++)
        for (int ch = 0; ch < 3; ch++)
            endPoints[ep][ch] = unquantizedEndPoints[ep][ch];

    QuantizeTo565(endPoints[0]);
    QuantizeTo565(endPoints[1]);

    IndexSelector<3> selector;
    selector.Init<false>(channelWeights, endPoints, range);

    MUInt15 indexes[16];

    MFloat paranoidFactors[3];
    for (int ch = 0; ch < 3; ch++)
        paranoidFactors[ch] = ParanoidFactorForSpan(ParallelMath::LosslessCast<MSInt16>::Cast(endPoints[0][ch]) - ParallelMath::LosslessCast<MSInt16>::Cast(endPoints[1][ch]));

    MFloat error = ParallelMath::MakeFloatZero();
    AggregatedError<3> aggError;
    for (int px = 0; px < 16; px++)
    {
        MUInt15 index = selector.SelectIndexLDR(floatPixels[px], rtn);
        indexes[px] = index;

        if (refiner)
            refiner->ContributeUnweightedPW(preWeightedPixels[px], index);

        MUInt15 reconstructed[3];
        selector.ReconstructLDRPrecise(index, reconstructed);

        if (flags & Flags::S3TC_Paranoid)
        {
            for (int ch = 0; ch < 3; ch++)
                error = error + ParanoidDiff(reconstructed[ch], pixels[px][ch], paranoidFactors[ch]) * channelWeightsSq[ch];
        }
        else
            BCCommon::ComputeErrorLDR<3>(flags, reconstructed, pixels[px], aggError);
    }

    if (!(flags & Flags::S3TC_Paranoid))
        error = aggError.Finalize(flags, channelWeightsSq);

    ParallelMath::FloatCompFlag better = ParallelMath::Less(error, bestError);

    if (ParallelMath::AnySet(better))
    {
        ParallelMath::Int16CompFlag betterInt16 = ParallelMath::FloatFlagToInt16(better);

        ParallelMath::ConditionalSet(bestError, better, error);

        for (int ep = 0; ep < 2; ep++)
            for (int ch = 0; ch < 3; ch++)
                ParallelMath::ConditionalSet(bestEndpoints[ep][ch], betterInt16, endPoints[ep][ch]);

        for (int px = 0; px < 16; px++)
            ParallelMath::ConditionalSet(bestIndexes[px], betterInt16, indexes[px]);

        ParallelMath::ConditionalSet(bestRange, betterInt16, ParallelMath::MakeUInt15(static_cast<uint16_t>(range)));
    }
}

void cvtt::Internal::S3TCComputer::TestCounts(uint32_t flags, const int *counts, int nCounts, const MUInt15 &numElements, const MUInt15 pixels[16][4], const MFloat floatPixels[16][4], const MFloat preWeightedPixels[16][4], bool alphaTest,
    const MFloat floatSortedInputs[16][4], const MFloat preWeightedFloatSortedInputs[16][4], const float *channelWeights, MFloat &bestError, MUInt15 bestEndpoints[2][3], MUInt15 bestIndexes[16], MUInt15 &bestRange,
    const ParallelMath::RoundTowardNearestForScope* rtn)
{
    UNREFERENCED_PARAMETER(alphaTest);
    UNREFERENCED_PARAMETER(flags);

    EndpointRefiner<3> refiner;

    refiner.Init(nCounts, channelWeights);

    bool escape = false;
    int e = 0;
    for (int i = 0; i < nCounts; i++)
    {
        for (int n = 0; n < counts[i]; n++)
        {
            ParallelMath::Int16CompFlag valid = ParallelMath::Less(ParallelMath::MakeUInt15(static_cast<uint16_t>(n)), numElements);
            if (!ParallelMath::AnySet(valid))
            {
                escape = true;
                break;
            }

            if (ParallelMath::AllSet(valid))
                refiner.ContributeUnweightedPW(preWeightedFloatSortedInputs[e++], ParallelMath::MakeUInt15(static_cast<uint16_t>(i)));
            else
            {
                MFloat weight = ParallelMath::Select(ParallelMath::Int16FlagToFloat(valid), ParallelMath::MakeFloat(1.0f), ParallelMath::MakeFloat(0.0f));
                refiner.ContributePW(preWeightedFloatSortedInputs[e++], ParallelMath::MakeUInt15(static_cast<uint16_t>(i)), weight);
            }
        }

        if (escape)
            break;
    }

    MUInt15 endPoints[2][3];
    refiner.GetRefinedEndpointsLDR(endPoints, rtn);

    TestEndpoints(flags, pixels, floatPixels, preWeightedPixels, endPoints, nCounts, channelWeights, bestError, bestEndpoints, bestIndexes, bestRange, NULL, rtn);
}

void cvtt::Internal::S3TCComputer::PackExplicitAlpha(uint32_t flags, const PixelBlockU8* inputs, int inputChannel, uint8_t* packedBlocks, size_t packedBlockStride)
{
    UNREFERENCED_PARAMETER(flags);
    ParallelMath::RoundTowardNearestForScope rtn;

    float weights[1] = { 1.0f };

    MUInt15 pixels[16];
    MFloat floatPixels[16];

    for (int px = 0; px < 16; px++)
    {
        ParallelMath::ConvertLDRInputs(inputs, px, inputChannel, pixels[px]);
        floatPixels[px] = ParallelMath::ToFloat(pixels[px]);
    }

    MUInt15 ep[2][1] = { { ParallelMath::MakeUInt15(0) },{ ParallelMath::MakeUInt15(255) } };

    IndexSelector<1> selector;
    selector.Init<false>(weights, ep, 16);

    MUInt15 indexes[16];

    for (int px = 0; px < 16; px++)
        indexes[px] = selector.SelectIndexLDR(&floatPixels[px], &rtn);

    for (int block = 0; block < ParallelMath::ParallelSize; block++)
    {
        for (int px = 0; px < 16; px += 2)
        {
            int index0 = ParallelMath::Extract(indexes[px], block);
            int index1 = ParallelMath::Extract(indexes[px + 1], block);

            packedBlocks[px / 2] = static_cast<uint8_t>(index0 | (index1 << 4));
        }

        packedBlocks += packedBlockStride;
    }
}

void cvtt::Internal::S3TCComputer::PackInterpolatedAlpha(uint32_t flags, const PixelBlockU8* inputs, int inputChannel, uint8_t* packedBlocks, size_t packedBlockStride, bool isSigned, int maxTweakRounds, int numRefineRounds)
{
    if (maxTweakRounds < 1)
        maxTweakRounds = 1;

    if (numRefineRounds < 1)
        numRefineRounds = 1;

    ParallelMath::RoundTowardNearestForScope rtn;

    float oneWeight[1] = { 1.0f };

    MUInt15 pixels[16];
    MFloat floatPixels[16];

    MUInt15 highTerminal = isSigned ? ParallelMath::MakeUInt15(254) : ParallelMath::MakeUInt15(255);
    MUInt15 highTerminalMinusOne = highTerminal - ParallelMath::MakeUInt15(1);

    for (int px = 0; px < 16; px++)
    {
        ParallelMath::ConvertLDRInputs(inputs, px, inputChannel, pixels[px]);

        if (isSigned)
            pixels[px] = ParallelMath::Min(pixels[px], highTerminal);

        floatPixels[px] = ParallelMath::ToFloat(pixels[px]);
    }

    MUInt15 sortedPixels[16];
    for (int px = 0; px < 16; px++)
        sortedPixels[px] = pixels[px];

    for (int sortEnd = 15; sortEnd > 0; sortEnd--)
    {
        for (int sortOffset = 0; sortOffset < sortEnd; sortOffset++)
        {
            MUInt15 a = sortedPixels[sortOffset];
            MUInt15 b = sortedPixels[sortOffset + 1];

            sortedPixels[sortOffset] = ParallelMath::Min(a, b);
            sortedPixels[sortOffset + 1] = ParallelMath::Max(a, b);
        }
    }

    MUInt15 zero = ParallelMath::MakeUInt15(0);
    MUInt15 one = ParallelMath::MakeUInt15(1);

    MUInt15 bestIsFullRange = zero;
    MFloat bestError = ParallelMath::MakeFloat(FLT_MAX);
    MUInt15 bestEP[2] = { zero, zero };
    MUInt15 bestIndexes[16] = {
        zero, zero, zero, zero,
        zero, zero, zero, zero,
        zero, zero, zero, zero,
        zero, zero, zero, zero
    };

    // Full-precision
    {
        MUInt15 minEP = sortedPixels[0];
        MUInt15 maxEP = sortedPixels[15];

        MFloat base[1] = { ParallelMath::ToFloat(minEP) };
        MFloat offset[1] = { ParallelMath::ToFloat(maxEP - minEP) };

        UnfinishedEndpoints<1> ufep = UnfinishedEndpoints<1>(base, offset);

        int numTweakRounds = BCCommon::TweakRoundsForRange(8);
        if (numTweakRounds > maxTweakRounds)
            numTweakRounds = maxTweakRounds;

        for (int tweak = 0; tweak < numTweakRounds; tweak++)
        {
            MUInt15 ep[2][1];

            ufep.FinishLDR(tweak, 8, ep[0], ep[1]);

            for (int refinePass = 0; refinePass < numRefineRounds; refinePass++)
            {
                EndpointRefiner<1> refiner;
                refiner.Init(8, oneWeight);

                if (isSigned)
                    for (int epi = 0; epi < 2; epi++)
                        ep[epi][0] = ParallelMath::Min(ep[epi][0], highTerminal);

                IndexSelector<1> indexSelector;
                indexSelector.Init<false>(oneWeight, ep, 8);

                MUInt15 indexes[16];

                AggregatedError<1> aggError;
                for (int px = 0; px < 16; px++)
                {
                    MUInt15 index = indexSelector.SelectIndexLDR(&floatPixels[px], &rtn);

                    MUInt15 reconstructedPixel;

                    indexSelector.ReconstructLDRPrecise(index, &reconstructedPixel);
                    BCCommon::ComputeErrorLDR<1>(flags, &reconstructedPixel, &pixels[px], aggError);

                    if (refinePass != numRefineRounds - 1)
                        refiner.ContributeUnweightedPW(&floatPixels[px], index);

                    indexes[px] = index;
                }
                MFloat error = aggError.Finalize(flags | Flags::Uniform, oneWeight);

                ParallelMath::FloatCompFlag errorBetter = ParallelMath::Less(error, bestError);
                ParallelMath::Int16CompFlag errorBetter16 = ParallelMath::FloatFlagToInt16(errorBetter);

                if (ParallelMath::AnySet(errorBetter16))
                {
                    bestError = ParallelMath::Min(error, bestError);
                    ParallelMath::ConditionalSet(bestIsFullRange, errorBetter16, one);
                    for (int px = 0; px < 16; px++)
                        ParallelMath::ConditionalSet(bestIndexes[px], errorBetter16, indexes[px]);

                    for (int epi = 0; epi < 2; epi++)
                        ParallelMath::ConditionalSet(bestEP[epi], errorBetter16, ep[epi][0]);
                }

                if (refinePass != numRefineRounds - 1)
                    refiner.GetRefinedEndpointsLDR(ep, &rtn);
            }
        }
    }

    // Reduced precision with special endpoints
    {
        MUInt15 bestHeuristicMin = sortedPixels[0];
        MUInt15 bestHeuristicMax = sortedPixels[15];

        ParallelMath::Int16CompFlag canTryClipping;

        // In reduced precision, we want try putting endpoints at the reserved indexes at the ends.
        // The heuristic we use is to assign indexes to the end as long as they aren't off by more than half of the index range.
        // This will usually not find anything, but it's cheap to check.

        {
            MUInt15 largestPossibleRange = bestHeuristicMax - bestHeuristicMin; // Max: 255
            MUInt15 lowestPossibleClearance = ParallelMath::Min(bestHeuristicMin, static_cast<MUInt15>(highTerminal - bestHeuristicMax));

            MUInt15 lowestPossibleClearanceTimes10 = (lowestPossibleClearance << 2) + (lowestPossibleClearance << 4);
            canTryClipping = ParallelMath::LessOrEqual(lowestPossibleClearanceTimes10, largestPossibleRange);
        }

        if (ParallelMath::AnySet(canTryClipping))
        {
            MUInt15 lowClearances[16];
            MUInt15 highClearances[16];
            MUInt15 bestSkipCount = ParallelMath::MakeUInt15(0);

            lowClearances[0] = highClearances[0] = ParallelMath::MakeUInt15(0);

            for (int px = 1; px < 16; px++)
            {
                lowClearances[px] = sortedPixels[px - 1];
                highClearances[px] = highTerminal - sortedPixels[16 - px];
            }

            for (uint16_t firstIndex = 0; firstIndex < 16; firstIndex++)
            {
                uint16_t numSkippedLow = firstIndex;

                MUInt15 lowClearance = lowClearances[firstIndex];

                for (uint16_t lastIndex = firstIndex; lastIndex < 16; lastIndex++)
                {
                    uint16_t numSkippedHigh = 15 - lastIndex;
                    uint16_t numSkipped = numSkippedLow + numSkippedHigh;

                    MUInt15 numSkippedV = ParallelMath::MakeUInt15(numSkipped);

                    ParallelMath::Int16CompFlag areMoreSkipped = ParallelMath::Less(bestSkipCount, numSkippedV);

                    if (!ParallelMath::AnySet(areMoreSkipped))
                        continue;

                    MUInt15 clearance = ParallelMath::Max(highClearances[numSkippedHigh], lowClearance);
                    MUInt15 clearanceTimes10 = (clearance << 2) + (clearance << 4);

                    MUInt15 range = sortedPixels[lastIndex] - sortedPixels[firstIndex];

                    ParallelMath::Int16CompFlag isBetter = (areMoreSkipped & ParallelMath::LessOrEqual(clearanceTimes10, range));
                    ParallelMath::ConditionalSet(bestHeuristicMin, isBetter, sortedPixels[firstIndex]);
                    ParallelMath::ConditionalSet(bestHeuristicMax, isBetter, sortedPixels[lastIndex]);
                }
            }
        }

        MUInt15 bestSimpleMin = one;
        MUInt15 bestSimpleMax = highTerminalMinusOne;

        for (int px = 0; px < 16; px++)
        {
            ParallelMath::ConditionalSet(bestSimpleMin, ParallelMath::Less(zero, sortedPixels[15 - px]), sortedPixels[15 - px]);
            ParallelMath::ConditionalSet(bestSimpleMax, ParallelMath::Less(sortedPixels[px], highTerminal), sortedPixels[px]);
        }

        MUInt15 minEPs[2] = { bestSimpleMin, bestHeuristicMin };
        MUInt15 maxEPs[2] = { bestSimpleMax, bestHeuristicMax };

        int minEPRange = 2;
        if (ParallelMath::AllSet(ParallelMath::Equal(minEPs[0], minEPs[1])))
            minEPRange = 1;

        int maxEPRange = 2;
        if (ParallelMath::AllSet(ParallelMath::Equal(maxEPs[0], maxEPs[1])))
            maxEPRange = 1;

        for (int minEPIndex = 0; minEPIndex < minEPRange; minEPIndex++)
        {
            for (int maxEPIndex = 0; maxEPIndex < maxEPRange; maxEPIndex++)
            {
                MFloat base[1] = { ParallelMath::ToFloat(minEPs[minEPIndex]) };
                MFloat offset[1] = { ParallelMath::ToFloat(maxEPs[maxEPIndex] - minEPs[minEPIndex]) };

                UnfinishedEndpoints<1> ufep = UnfinishedEndpoints<1>(base, offset);

                int numTweakRounds = BCCommon::TweakRoundsForRange(6);
                if (numTweakRounds > maxTweakRounds)
                    numTweakRounds = maxTweakRounds;

                for (int tweak = 0; tweak < numTweakRounds; tweak++)
                {
                    MUInt15 ep[2][1];

                    ufep.FinishLDR(tweak, 8, ep[0], ep[1]);

                    for (int refinePass = 0; refinePass < numRefineRounds; refinePass++)
                    {
                        EndpointRefiner<1> refiner;
                        refiner.Init(6, oneWeight);

                        if (isSigned)
                            for (int epi = 0; epi < 2; epi++)
                                ep[epi][0] = ParallelMath::Min(ep[epi][0], highTerminal);

                        IndexSelector<1> indexSelector;
                        indexSelector.Init<false>(oneWeight, ep, 6);

                        MUInt15 indexes[16];
                        MFloat error = ParallelMath::MakeFloatZero();

                        for (int px = 0; px < 16; px++)
                        {
                            MUInt15 selectedIndex = indexSelector.SelectIndexLDR(&floatPixels[px], &rtn);

                            MUInt15 reconstructedPixel;

                            indexSelector.ReconstructLDRPrecise(selectedIndex, &reconstructedPixel);

                            MFloat zeroError = BCCommon::ComputeErrorLDRSimple<1>(flags | Flags::Uniform, &zero, &pixels[px], 1, oneWeight);
                            MFloat highTerminalError = BCCommon::ComputeErrorLDRSimple<1>(flags | Flags::Uniform, &highTerminal, &pixels[px], 1, oneWeight);
                            MFloat selectedIndexError = BCCommon::ComputeErrorLDRSimple<1>(flags | Flags::Uniform, &reconstructedPixel, &pixels[px], 1, oneWeight);

                            MFloat bestPixelError = zeroError;
                            MUInt15 index = ParallelMath::MakeUInt15(6);

                            ParallelMath::ConditionalSet(index, ParallelMath::FloatFlagToInt16(ParallelMath::Less(highTerminalError, bestPixelError)), ParallelMath::MakeUInt15(7));
                            bestPixelError = ParallelMath::Min(bestPixelError, highTerminalError);

                            ParallelMath::FloatCompFlag selectedIndexBetter = ParallelMath::Less(selectedIndexError, bestPixelError);

                            if (ParallelMath::AllSet(selectedIndexBetter))
                            {
                                if (refinePass != numRefineRounds - 1)
                                    refiner.ContributeUnweightedPW(&floatPixels[px], selectedIndex);
                            }
                            else
                            {
                                MFloat refineWeight = ParallelMath::Select(selectedIndexBetter, ParallelMath::MakeFloat(1.0f), ParallelMath::MakeFloatZero());

                                if (refinePass != numRefineRounds - 1)
                                    refiner.ContributePW(&floatPixels[px], selectedIndex, refineWeight);
                            }

                            ParallelMath::ConditionalSet(index, ParallelMath::FloatFlagToInt16(selectedIndexBetter), selectedIndex);
                            bestPixelError = ParallelMath::Min(bestPixelError, selectedIndexError);

                            error = error + bestPixelError;

                            indexes[px] = index;
                        }

                        ParallelMath::FloatCompFlag errorBetter = ParallelMath::Less(error, bestError);
                        ParallelMath::Int16CompFlag errorBetter16 = ParallelMath::FloatFlagToInt16(errorBetter);

                        if (ParallelMath::AnySet(errorBetter16))
                        {
                            bestError = ParallelMath::Min(error, bestError);
                            ParallelMath::ConditionalSet(bestIsFullRange, errorBetter16, zero);
                            for (int px = 0; px < 16; px++)
                                ParallelMath::ConditionalSet(bestIndexes[px], errorBetter16, indexes[px]);

                            for (int epi = 0; epi < 2; epi++)
                                ParallelMath::ConditionalSet(bestEP[epi], errorBetter16, ep[epi][0]);
                        }

                        if (refinePass != numRefineRounds - 1)
                            refiner.GetRefinedEndpointsLDR(ep, &rtn);
                    }
                }
            }
        }
    }

    for (int block = 0; block < ParallelMath::ParallelSize; block++)
    {
        int ep0 = ParallelMath::Extract(bestEP[0], block);
        int ep1 = ParallelMath::Extract(bestEP[1], block);
        int isFullRange = ParallelMath::Extract(bestIsFullRange, block);

        if (isSigned)
        {
            ep0 -= 127;
            ep1 -= 127;

            assert(ep0 >= -127 && ep0 <= 127);
            assert(ep1 >= -127 && ep1 <= 127);
        }


        bool swapEndpoints = (isFullRange != 0) != (ep0 > ep1);

        if (swapEndpoints)
            std::swap(ep0, ep1);

        uint16_t dumpBits = 0;
        int dumpBitsOffset = 0;
        int dumpByteOffset = 2;
        packedBlocks[0] = static_cast<uint8_t>(ep0 & 0xff);
        packedBlocks[1] = static_cast<uint8_t>(ep1 & 0xff);

        int maxValue = (isFullRange != 0) ? 7 : 5;

        for (int px = 0; px < 16; px++)
        {
            int index = ParallelMath::Extract(bestIndexes[px], block);

            if (swapEndpoints && index <= maxValue)
                index = maxValue - index;

            if (index != 0)
            {
                if (index == maxValue)
                    index = 1;
                else if (index < maxValue)
                    index++;
            }

            assert(index >= 0 && index < 8);

            dumpBits |= static_cast<uint16_t>(index << dumpBitsOffset);
            dumpBitsOffset += 3;

            if (dumpBitsOffset >= 8)
            {
                assert(dumpByteOffset < 8);
                packedBlocks[dumpByteOffset] = static_cast<uint8_t>(dumpBits & 0xff);
                dumpBits >>= 8;
                dumpBitsOffset -= 8;
                dumpByteOffset++;
            }
        }

        assert(dumpBitsOffset == 0);
        assert(dumpByteOffset == 8);

        packedBlocks += packedBlockStride;
    }
}

void cvtt::Internal::S3TCComputer::PackRGB(uint32_t flags, const PixelBlockU8* inputs, uint8_t* packedBlocks, size_t packedBlockStride, const float channelWeights[4], bool alphaTest, float alphaThreshold, bool exhaustive, int maxTweakRounds, int numRefineRounds)
{
    ParallelMath::RoundTowardNearestForScope rtn;

    if (numRefineRounds < 1)
        numRefineRounds = 1;

    if (maxTweakRounds < 1)
        maxTweakRounds = 1;

    EndpointSelector<3, 8> endpointSelector;

    MUInt15 pixels[16][4];
    MFloat floatPixels[16][4];

    MFloat preWeightedPixels[16][4];

    for (int px = 0; px < 16; px++)
    {
        for (int ch = 0; ch < 4; ch++)
            ParallelMath::ConvertLDRInputs(inputs, px, ch, pixels[px][ch]);
    }

    for (int px = 0; px < 16; px++)
    {
        for (int ch = 0; ch < 4; ch++)
            floatPixels[px][ch] = ParallelMath::ToFloat(pixels[px][ch]);
    }

    if (alphaTest)
    {
        MUInt15 threshold = ParallelMath::MakeUInt15(static_cast<uint16_t>(floor(alphaThreshold * 255.0f + 0.5f)));

        for (int px = 0; px < 16; px++)
        {
            ParallelMath::Int16CompFlag belowThreshold = ParallelMath::Less(pixels[px][3], threshold);
            pixels[px][3] = ParallelMath::Select(belowThreshold, ParallelMath::MakeUInt15(0), ParallelMath::MakeUInt15(255));
        }
    }

    BCCommon::PreWeightPixelsLDR<4>(preWeightedPixels, pixels, channelWeights);

    MUInt15 minAlpha = ParallelMath::MakeUInt15(255);

    for (int px = 0; px < 16; px++)
        minAlpha = ParallelMath::Min(minAlpha, pixels[px][3]);

    MFloat pixelWeights[16];
    for (int px = 0; px < 16; px++)
    {
        pixelWeights[px] = ParallelMath::MakeFloat(1.0f);
        if (alphaTest)
        {
            ParallelMath::Int16CompFlag isTransparent = ParallelMath::Less(pixels[px][3], ParallelMath::MakeUInt15(255));

            ParallelMath::ConditionalSet(pixelWeights[px], ParallelMath::Int16FlagToFloat(isTransparent), ParallelMath::MakeFloatZero());
        }
    }

    for (int pass = 0; pass < NumEndpointSelectorPasses; pass++)
    {
        for (int px = 0; px < 16; px++)
            endpointSelector.ContributePass(preWeightedPixels[px], pass, pixelWeights[px]);

        endpointSelector.FinishPass(pass);
    }

    UnfinishedEndpoints<3> ufep = endpointSelector.GetEndpoints(channelWeights);

    MUInt15 bestEndpoints[2][3];
    MUInt15 bestIndexes[16];
    MUInt15 bestRange = ParallelMath::MakeUInt15(0);
    MFloat bestError = ParallelMath::MakeFloat(FLT_MAX);

    for (int px = 0; px < 16; px++)
        bestIndexes[px] = ParallelMath::MakeUInt15(0);

    for (int ep = 0; ep < 2; ep++)
        for (int ch = 0; ch < 3; ch++)
            bestEndpoints[ep][ch] = ParallelMath::MakeUInt15(0);

    if (exhaustive)
    {
        MSInt16 sortBins[16];

        {
            // Compute an 11-bit index, change it to signed, stuff it in the high bits of the sort bins,
            // and pack the original indexes into the low bits.

            MUInt15 sortEP[2][3];
            ufep.FinishLDR(0, 11, sortEP[0], sortEP[1]);

            IndexSelector<3> sortSelector;
            sortSelector.Init<false>(channelWeights, sortEP, 1 << 11);

            for (int16_t px = 0; px < 16; px++)
            {
                MSInt16 sortBin = ParallelMath::LosslessCast<MSInt16>::Cast(sortSelector.SelectIndexLDR(floatPixels[px], &rtn) << 4);

                if (alphaTest)
                {
                    ParallelMath::Int16CompFlag isTransparent = ParallelMath::Less(pixels[px][3], ParallelMath::MakeUInt15(255));

                    ParallelMath::ConditionalSet(sortBin, isTransparent, ParallelMath::MakeSInt16(-16)); // 0xfff0
                }

                sortBin = sortBin + ParallelMath::MakeSInt16(px);

                sortBins[px] = sortBin;
            }
        }

        // Sort bins
        for (int sortEnd = 1; sortEnd < 16; sortEnd++)
        {
            for (int sortLoc = sortEnd; sortLoc > 0; sortLoc--)
            {
                MSInt16 a = sortBins[sortLoc];
                MSInt16 b = sortBins[sortLoc - 1];

                sortBins[sortLoc] = ParallelMath::Max(a, b);
                sortBins[sortLoc - 1] = ParallelMath::Min(a, b);
            }
        }

        MUInt15 firstElement = ParallelMath::MakeUInt15(0);
        for (uint16_t e = 0; e < 16; e++)
        {
            ParallelMath::Int16CompFlag isInvalid = ParallelMath::Less(sortBins[e], ParallelMath::MakeSInt16(0));
            ParallelMath::ConditionalSet(firstElement, isInvalid, ParallelMath::MakeUInt15(e + 1));
            if (!ParallelMath::AnySet(isInvalid))
                break;
        }

        MUInt15 numElements = ParallelMath::MakeUInt15(16) - firstElement;

        MUInt15 sortedInputs[16][4];
        MFloat floatSortedInputs[16][4];
        MFloat pwFloatSortedInputs[16][4];

        for (int e = 0; e < 16; e++)
        {
            for (int ch = 0; ch < 4; ch++)
                sortedInputs[e][ch] = ParallelMath::MakeUInt15(0);
        }

        for (int block = 0; block < ParallelMath::ParallelSize; block++)
        {
            for (int e = ParallelMath::Extract(firstElement, block); e < 16; e++)
            {
                ParallelMath::ScalarUInt16 sortBin = ParallelMath::Extract(sortBins[e], block);
                int originalIndex = (sortBin & 15);

                for (int ch = 0; ch < 4; ch++)
                    ParallelMath::PutUInt15(sortedInputs[15 - e][ch], block, ParallelMath::Extract(pixels[originalIndex][ch], block));
            }
        }

        for (int e = 0; e < 16; e++)
        {
            for (int ch = 0; ch < 4; ch++)
            {
                MFloat f = ParallelMath::ToFloat(sortedInputs[e][ch]);
                floatSortedInputs[e][ch] = f;
                pwFloatSortedInputs[e][ch] = f * channelWeights[ch];
            }
        }

        for (int n0 = 0; n0 <= 15; n0++)
        {
            int remainingFor1 = 16 - n0;
            if (remainingFor1 == 16)
                remainingFor1 = 15;

            for (int n1 = 0; n1 <= remainingFor1; n1++)
            {
                int remainingFor2 = 16 - n1 - n0;
                if (remainingFor2 == 16)
                    remainingFor2 = 15;

                for (int n2 = 0; n2 <= remainingFor2; n2++)
                {
                    int n3 = 16 - n2 - n1 - n0;

                    if (n3 == 16)
                        continue;

                    int counts[4] = { n0, n1, n2, n3 };

                    TestCounts(flags, counts, 4, numElements, pixels, floatPixels, preWeightedPixels, alphaTest, floatSortedInputs, pwFloatSortedInputs, channelWeights, bestError, bestEndpoints, bestIndexes, bestRange, &rtn);
                }
            }
        }

        TestSingleColor(flags, pixels, floatPixels, 4, channelWeights, bestError, bestEndpoints, bestIndexes, bestRange, &rtn);

        if (alphaTest)
        {
            for (int n0 = 0; n0 <= 15; n0++)
            {
                int remainingFor1 = 16 - n0;
                if (remainingFor1 == 16)
                    remainingFor1 = 15;

                for (int n1 = 0; n1 <= remainingFor1; n1++)
                {
                    int n2 = 16 - n1 - n0;

                    if (n2 == 16)
                        continue;

                    int counts[3] = { n0, n1, n2 };

                    TestCounts(flags, counts, 3, numElements, pixels, floatPixels, preWeightedPixels, alphaTest, floatSortedInputs, pwFloatSortedInputs, channelWeights, bestError, bestEndpoints, bestIndexes, bestRange, &rtn);
                }
            }

            TestSingleColor(flags, pixels, floatPixels, 3, channelWeights, bestError, bestEndpoints, bestIndexes, bestRange, &rtn);
        }
    }
    else
    {
        int minRange = alphaTest ? 3 : 4;

        for (int range = minRange; range <= 4; range++)
        {
            int tweakRounds = BCCommon::TweakRoundsForRange(range);
            if (tweakRounds > maxTweakRounds)
                tweakRounds = maxTweakRounds;

            for (int tweak = 0; tweak < tweakRounds; tweak++)
            {
                MUInt15 endPoints[2][3];

                ufep.FinishLDR(tweak, range, endPoints[0], endPoints[1]);

                for (int refine = 0; refine < numRefineRounds; refine++)
                {
                    EndpointRefiner<3> refiner;
                    refiner.Init(range, channelWeights);

                    TestEndpoints(flags, pixels, floatPixels, preWeightedPixels, endPoints, range, channelWeights, bestError, bestEndpoints, bestIndexes, bestRange, &refiner, &rtn);

                    if (refine != numRefineRounds - 1)
                        refiner.GetRefinedEndpointsLDR(endPoints, &rtn);
                }
            }
        }
    }

    for (int block = 0; block < ParallelMath::ParallelSize; block++)
    {
        ParallelMath::ScalarUInt16 range = ParallelMath::Extract(bestRange, block);
        assert(range == 3 || range == 4);

        ParallelMath::ScalarUInt16 compressedEP[2];
        for (int ep = 0; ep < 2; ep++)
        {
            ParallelMath::ScalarUInt16 endPoint[3];
            for (int ch = 0; ch < 3; ch++)
                endPoint[ch] = ParallelMath::Extract(bestEndpoints[ep][ch], block);

            int compressed = (endPoint[0] & 0xf8) << 8;
            compressed |= (endPoint[1] & 0xfc) << 3;
            compressed |= (endPoint[2] & 0xf8) >> 3;

            compressedEP[ep] = static_cast<ParallelMath::ScalarUInt16>(compressed);
        }

        int indexOrder[4];

        if (range == 4)
        {
            if (compressedEP[0] == compressedEP[1])
            {
                indexOrder[0] = 0;
                indexOrder[1] = 0;
                indexOrder[2] = 0;
                indexOrder[3] = 0;
            }
            else if (compressedEP[0] < compressedEP[1])
            {
                std::swap(compressedEP[0], compressedEP[1]);
                indexOrder[0] = 1;
                indexOrder[1] = 3;
                indexOrder[2] = 2;
                indexOrder[3] = 0;
            }
            else
            {
                indexOrder[0] = 0;
                indexOrder[1] = 2;
                indexOrder[2] = 3;
                indexOrder[3] = 1;
            }
        }
        else
        {
            assert(range == 3);

            if (compressedEP[0] > compressedEP[1])
            {
                std::swap(compressedEP[0], compressedEP[1]);
                indexOrder[0] = 1;
                indexOrder[1] = 2;
                indexOrder[2] = 0;
            }
            else
            {
                indexOrder[0] = 0;
                indexOrder[1] = 2;
                indexOrder[2] = 1;
            }
            indexOrder[3] = 3;
        }

        packedBlocks[0] = static_cast<uint8_t>(compressedEP[0] & 0xff);
        packedBlocks[1] = static_cast<uint8_t>((compressedEP[0] >> 8) & 0xff);
        packedBlocks[2] = static_cast<uint8_t>(compressedEP[1] & 0xff);
        packedBlocks[3] = static_cast<uint8_t>((compressedEP[1] >> 8) & 0xff);

        for (int i = 0; i < 16; i += 4)
        {
            int packedIndexes = 0;
            for (int subi = 0; subi < 4; subi++)
            {
                ParallelMath::ScalarUInt16 index = ParallelMath::Extract(bestIndexes[i + subi], block);
                packedIndexes |= (indexOrder[index] << (subi * 2));
            }

            packedBlocks[4 + i / 4] = static_cast<uint8_t>(packedIndexes);
        }

        packedBlocks += packedBlockStride;
    }
}

#endif
